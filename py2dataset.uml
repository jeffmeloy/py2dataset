@startuml
'Used to create py2dataset.png from https://www.plantuml.com/plantuml/uml'

:> python py2dataset.py <optional arguments>; 

:def main():
    Command-line entry point for processing Python files and generating datasets.
    Optional command-line arguments:
    --start (str, optional): Starting directory for Python files or GitHub repository Python files. Default: cwd.
    --output_dir (str, optional): Directory to write the output files. Default: ./dataset/.
    --questions_pathname (str, optional): Path and filename of the questions file. Default: ./py2dataset_questions.json.
    --model_config_pathname (str, optional): Path and filename of the model configuration file. Default: ./py2dataset_model_config.yaml.
    --use_llm (bool, optional): Use llm to answer code purpose question. Default: False.
    --quiet (bool, optional): Limit logging output. Default: False.
    --single_process (bool, optional): Use a single process to process Python files. Default: False.
    --detailed (bool, optional): Include detailed analysis. Default: False.
    --html (bool, optional): Generate HTML output. Default: False.
    --I (str, optional): Enable interactive mode. Default: False.
    --skip_regen (str, optional): Skip regeneration of existing instruct.json files. Default: False.
    --help: Display main() docstring.;

:py2dataset.py:
- Parse command line arguments
- Read questions
- Obtain Python File listing within <starting directory>;

while (More Python Files?) is (yes)
  :get_python_file_details.py:
  - Extract code details from AST
  - Generate code relationship graphs;

  :get_python_dataset.py:
  - Generate instruction-input-output triplets;

  while (More questions?) is (yes)
    :Use the AST obtained data to answer question;

    if (use_llm and purpose question) then (yes)
      :Use the llm to describe the code's purpose;
    else (no)
    endif

    if (use_llm and detailed) then (yes)
      :Use llm to describe purpose and significance of each code object;
    else (no)
    endif

    :Construct instruct.json data
    - instruction = current question
    - input = code element
    - output = answer to current question;
  endwhile

  :save_output.py:
  - Save datasets and code file details
    - <filename>.instruct.json
    - <filename>.details.yaml
  - Save code graph
    - <filename>.entire_code_graph.png;
endwhile

:save_output.py:
- Combine all qa and instruct JSON files and create other datasets
  - instruct.json - instruction/input/output dataset
  - document_code.json - document/code dataset, if --use_llm
  - sharegpt.json - system/human/gpt dataset, if --use_llm
  - code_datails.yaml - yaml formatted file, if --use_llm
  - corresponding .html files for each of the .json files, if --use_html;

:End;
@enduml