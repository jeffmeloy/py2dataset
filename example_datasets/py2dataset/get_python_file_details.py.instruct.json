[
    {
        "instruction": "Dependencies in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\n\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docstring` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport logging\nimport json\nfrom typing import Dict, List, Union\nfrom get_code_graph import get_code_graph\n\n\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if (\n        tree.body\n        and isinstance(tree.body[0], ast.Expr)\n        and isinstance(tree.body[0].value, ast.Str)\n    ):\n        tree.body.pop(0)\n\n    for node in ast.walk(tree):\n        if (\n            isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef))\n            and node.body\n        ):\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(\n                first_body_node.value, ast.Str\n            ):\n                node.body.pop(0)\n\n    return ast.unparse(tree)\n\n\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(\n                body_item.targets[0], ast.Name\n            ):\n                get_all_calls(body_item.value, calls)\n\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n\n    # Build the dictionary after traversal\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n\n    return calls_dict\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(\n            node, \"method\" if self.current_class else \"function\"\n        )\n        if self.current_class:\n            self.classes[self.current_class][f\"class_method_{node.name}\"] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(\n            node, \"class\"\n        )  # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node)  # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f\"{target.id}={value_repr}\"\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(\n        self, node: ast.AST, node_type: str\n    ) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = (\n            [arg.arg for arg in node.args.args]\n            if node_type in [\"function\", \"method\"]\n            else None\n        )\n        node_variables = list(\n            {\n                ast.unparse(target)\n                for subnode in node_walk\n                if isinstance(subnode, ast.Assign)\n                for target in subnode.targets\n                if isinstance(target, ast.Name)\n            }\n        )\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n\n        details = {\n            f\"{node_type}_name\": node.name,\n            f\"{node_type}_code\": ast.unparse(node),\n            f\"{node_type}_docstring\": next(\n                (\n                    n.value.s\n                    for n in node_walk\n                    if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)\n                ),\n                None,\n            ),\n            f\"{node_type}_inputs\": node_inputs,\n            f\"{node_type}_defaults\": [ast.unparse(d) for d in node.args.defaults]\n            if node_type in [\"function\", \"method\"]\n            else None,\n            f\"{node_type}_returns\": [\n                ast.unparse(subnode.value) if subnode.value is not None else \"None\"\n                for subnode in node_walk\n                if isinstance(subnode, ast.Return)\n            ],\n            f\"{node_type}_calls\": list(call_data.keys()),\n            f\"{node_type}_call_inputs\": call_data,\n            f\"{node_type}_variables\": node_variables,\n            f\"{node_type}_decorators\": list(\n                {ast.unparse(decorator) for decorator in node.decorator_list}\n                if node.decorator_list\n                else set()\n            ),\n            f\"{node_type}_annotations\": list(\n                {\n                    ast.unparse(subnode.annotation)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.AnnAssign)\n                    and subnode.annotation is not None\n                }\n            ),\n            f\"{node_type}_properties\": list(\n                {\n                    ast.unparse(subnode)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Attribute)\n                    and isinstance(subnode.ctx, ast.Store)\n                }\n            ),\n        }\n        if node_type in [\"class\", \"method\"]:\n            if (\n                node_type == \"method\" and self.current_class\n            ):  # find attributes defined as self.attribute\n                attributes = [\n                    target.attr\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Assign)\n                    for target in subnode.targets\n                    if isinstance(target, ast.Attribute)\n                    and isinstance(target.value, ast.Name)\n                    and target.value.id == \"self\"\n                ]\n                class_attributes = self.classes[self.current_class].setdefault(\n                    \"class_attributes\", []\n                )\n                class_attributes += attributes\n            if node_type == \"class\":\n                details.update(\n                    {\n                        \"class_attributes\": [\n                            target.attr\n                            for subnode in node.body\n                            if isinstance(subnode, ast.Assign)\n                            for target in subnode.targets\n                            if isinstance(target, ast.Attribute)\n                        ],\n                        \"class_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                        ],\n                        \"class_inheritance\": [ast.unparse(base) for base in node.bases]\n                        if node.bases\n                        else [],\n                        \"class_static_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                            and any(\n                                isinstance(decorator, ast.Name)\n                                and decorator.id == \"staticmethod\"\n                                for decorator in subnode.decorator_list\n                            )\n                        ],\n                    }\n                )\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        # Traverse the AST to capture various code details\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n\n        file_dependencies = {\n            alias.name\n            for subnode in node_walk\n            if isinstance(subnode, ast.Import)\n            for alias in subnode.names\n        } | {\n            subnode.module\n            for subnode in node_walk\n            if isinstance(subnode, ast.ImportFrom)\n        }\n\n        function_defs = [\n            {\n                func_name: {\n                    \"inputs\": details[\"function_inputs\"],\n                    \"calls\": details[\"function_calls\"],\n                    \"call_inputs\": details[\"function_call_inputs\"],\n                    \"returns\": details[\"function_returns\"],\n                }\n            }\n            for func_name, details in self.functions.items()\n        ]\n\n        class_defs = [\n            {\n                class_name: {\n                    \"method_defs\": {\n                        method_name[len(\"class_method_\") :]: {\n                            \"inputs\": details[\"method_inputs\"],\n                            \"calls\": details[\"method_calls\"],\n                            \"call_inputs\": details[\"method_call_inputs\"],\n                            \"returns\": details[\"method_returns\"],\n                        }\n                        for method_name, details in class_details.items()\n                        if method_name.startswith(\"class_method_\")\n                    }\n                }\n            }\n            for class_name, class_details in self.classes.items()\n        ]\n\n        self.file_info = {\n            \"file_code\": self.code,\n            \"file_ast\": node,\n            \"file_dependencies\": list(file_dependencies),\n            \"file_functions\": list(self.functions.keys()),\n            \"file_classes\": list(self.classes.keys()),\n            \"file_constants\": self.constants,\n            \"file_summary\": {\n                \"dependencies\": list(file_dependencies),\n                \"function_defs\": function_defs,\n                \"class_defs\": class_defs,\n            },\n            \"file_code_simplified\": remove_docstring(ast.unparse(node), self.tree),\n        }\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {\n        \"file_info\": visitor.file_info,\n        \"functions\": visitor.functions,\n        \"classes\": visitor.classes,\n    }\n\n    # get code graph items and add to file_details\n    file_summary = file_details[\"file_info\"][\"file_summary\"]\n    file_ast = file_details[\"file_info\"][\"file_ast\"]\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(\n        file_summary, file_ast\n    )\n    file_details[\"file_info\"][\"entire_code_graph\"] = entire_code_graph\n    file_details[\"file_info\"][\"control_flow_structure\"] = control_flow_structure\n    file_details[\"file_info\"][\"plant_uml\"] = plant_uml\n    file_details[\"file_info\"][\"file_summary\"] = json.dumps(file_summary).replace(\n        '\"', \"\"\n    )\n    del file_details[\"file_info\"][\"file_ast\"]\n\n    return file_details\n\n```",
        "output": "'typing', 'logging', 'get_code_graph', 'json', 'ast'\n\nPurpose and Significance:\n1. typing:\n   Purpose: Provides Python type hints for improved code readability, type checking, and IDE support during development. In get_python_file_details.py, 'typing' module is utilized to define data types of input parameters and return values in various functions such as Dict[str, List[str]], Union[str, List[str]], providing more accurate description on data formats. For example, within the 'remove_docstring' function inputs argument \"code\" specifies a plain string ('str'), and in the \"CodeVisitor\" constructor its code input type is string but inside the class, attributes like functions, classes, file_info are declared as Dictionary holding union types Union[str, List[str]] enabling versatility of data held. This enables flexible storage such as strings or lists for better data handling across diverse scenarios.\n\n2. logging:\n   Purpose: A built-in Python library facilitating creation and management of application log records during runtime. In get_python_file_details.py, 'logging' module is employed to handle warnings when reading or parsing errors occur while dealing with file paths like IOError, SyntaxError, PermissionError etc., helping developers detect issues promptly for debugging purposes. A warning message is logged stating error type along with affected file path ('logging.warning(f\"{e} error in file: {file_path}\")'.\n\n3. get_code_graph:\n   Purpose: This function is not directly explained in given context but presuming from related functions' names and dependencies, it likely constructs a directed graph representing code call relationships within the Python source code using NetworkX library as per requirement [req03]. The generated graph contains nodes representing functions, classes, methods with edges specifying their interconnections. It helps visualize program flow better by creating an understandable structure of function dependencies for easier comprehension and debugging.\n\n4. json:\n   Purpose: A standard Python library dealing with JSON data manipulation like serialization/deserialization. In get_python_file_details(), 'json' module is employed to serialize Python object ('file_summary') into a string format for storage or transfer, converting special characters like quotes from '\"' to empty strings ('\"' -> '') ensuring compatibility with other systems or tools dealing with JSON data format. It allows encoding complex Python objects as readable text format simplifying file summary sharing between various applications and services.\n\n5. ast:\n   Purpose: Part of Python's standard library dedicated to processing Abstract Syntax Trees (AST). It's fundamental for understanding program syntax rather than just source code content by breaking it down into a hierarchical data structure amenable for analysis and transformation operations. In get_python_file_details.py, 'ast' module is extensively used creating AST objects ('ast.parse()'), traversing them through NodeVisitor class inheritance (CodeVisitor), extracting function/class details with methods like walk(), iter_child_nodes(). It enables deeper inspection of Python code structure for detailed extraction and manipulation."
    },
    {
        "instruction": "Call code graph in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\n\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docstring` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport logging\nimport json\nfrom typing import Dict, List, Union\nfrom get_code_graph import get_code_graph\n\n\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if (\n        tree.body\n        and isinstance(tree.body[0], ast.Expr)\n        and isinstance(tree.body[0].value, ast.Str)\n    ):\n        tree.body.pop(0)\n\n    for node in ast.walk(tree):\n        if (\n            isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef))\n            and node.body\n        ):\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(\n                first_body_node.value, ast.Str\n            ):\n                node.body.pop(0)\n\n    return ast.unparse(tree)\n\n\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(\n                body_item.targets[0], ast.Name\n            ):\n                get_all_calls(body_item.value, calls)\n\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n\n    # Build the dictionary after traversal\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n\n    return calls_dict\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(\n            node, \"method\" if self.current_class else \"function\"\n        )\n        if self.current_class:\n            self.classes[self.current_class][f\"class_method_{node.name}\"] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(\n            node, \"class\"\n        )  # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node)  # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f\"{target.id}={value_repr}\"\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(\n        self, node: ast.AST, node_type: str\n    ) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = (\n            [arg.arg for arg in node.args.args]\n            if node_type in [\"function\", \"method\"]\n            else None\n        )\n        node_variables = list(\n            {\n                ast.unparse(target)\n                for subnode in node_walk\n                if isinstance(subnode, ast.Assign)\n                for target in subnode.targets\n                if isinstance(target, ast.Name)\n            }\n        )\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n\n        details = {\n            f\"{node_type}_name\": node.name,\n            f\"{node_type}_code\": ast.unparse(node),\n            f\"{node_type}_docstring\": next(\n                (\n                    n.value.s\n                    for n in node_walk\n                    if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)\n                ),\n                None,\n            ),\n            f\"{node_type}_inputs\": node_inputs,\n            f\"{node_type}_defaults\": [ast.unparse(d) for d in node.args.defaults]\n            if node_type in [\"function\", \"method\"]\n            else None,\n            f\"{node_type}_returns\": [\n                ast.unparse(subnode.value) if subnode.value is not None else \"None\"\n                for subnode in node_walk\n                if isinstance(subnode, ast.Return)\n            ],\n            f\"{node_type}_calls\": list(call_data.keys()),\n            f\"{node_type}_call_inputs\": call_data,\n            f\"{node_type}_variables\": node_variables,\n            f\"{node_type}_decorators\": list(\n                {ast.unparse(decorator) for decorator in node.decorator_list}\n                if node.decorator_list\n                else set()\n            ),\n            f\"{node_type}_annotations\": list(\n                {\n                    ast.unparse(subnode.annotation)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.AnnAssign)\n                    and subnode.annotation is not None\n                }\n            ),\n            f\"{node_type}_properties\": list(\n                {\n                    ast.unparse(subnode)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Attribute)\n                    and isinstance(subnode.ctx, ast.Store)\n                }\n            ),\n        }\n        if node_type in [\"class\", \"method\"]:\n            if (\n                node_type == \"method\" and self.current_class\n            ):  # find attributes defined as self.attribute\n                attributes = [\n                    target.attr\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Assign)\n                    for target in subnode.targets\n                    if isinstance(target, ast.Attribute)\n                    and isinstance(target.value, ast.Name)\n                    and target.value.id == \"self\"\n                ]\n                class_attributes = self.classes[self.current_class].setdefault(\n                    \"class_attributes\", []\n                )\n                class_attributes += attributes\n            if node_type == \"class\":\n                details.update(\n                    {\n                        \"class_attributes\": [\n                            target.attr\n                            for subnode in node.body\n                            if isinstance(subnode, ast.Assign)\n                            for target in subnode.targets\n                            if isinstance(target, ast.Attribute)\n                        ],\n                        \"class_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                        ],\n                        \"class_inheritance\": [ast.unparse(base) for base in node.bases]\n                        if node.bases\n                        else [],\n                        \"class_static_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                            and any(\n                                isinstance(decorator, ast.Name)\n                                and decorator.id == \"staticmethod\"\n                                for decorator in subnode.decorator_list\n                            )\n                        ],\n                    }\n                )\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        # Traverse the AST to capture various code details\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n\n        file_dependencies = {\n            alias.name\n            for subnode in node_walk\n            if isinstance(subnode, ast.Import)\n            for alias in subnode.names\n        } | {\n            subnode.module\n            for subnode in node_walk\n            if isinstance(subnode, ast.ImportFrom)\n        }\n\n        function_defs = [\n            {\n                func_name: {\n                    \"inputs\": details[\"function_inputs\"],\n                    \"calls\": details[\"function_calls\"],\n                    \"call_inputs\": details[\"function_call_inputs\"],\n                    \"returns\": details[\"function_returns\"],\n                }\n            }\n            for func_name, details in self.functions.items()\n        ]\n\n        class_defs = [\n            {\n                class_name: {\n                    \"method_defs\": {\n                        method_name[len(\"class_method_\") :]: {\n                            \"inputs\": details[\"method_inputs\"],\n                            \"calls\": details[\"method_calls\"],\n                            \"call_inputs\": details[\"method_call_inputs\"],\n                            \"returns\": details[\"method_returns\"],\n                        }\n                        for method_name, details in class_details.items()\n                        if method_name.startswith(\"class_method_\")\n                    }\n                }\n            }\n            for class_name, class_details in self.classes.items()\n        ]\n\n        self.file_info = {\n            \"file_code\": self.code,\n            \"file_ast\": node,\n            \"file_dependencies\": list(file_dependencies),\n            \"file_functions\": list(self.functions.keys()),\n            \"file_classes\": list(self.classes.keys()),\n            \"file_constants\": self.constants,\n            \"file_summary\": {\n                \"dependencies\": list(file_dependencies),\n                \"function_defs\": function_defs,\n                \"class_defs\": class_defs,\n            },\n            \"file_code_simplified\": remove_docstring(ast.unparse(node), self.tree),\n        }\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {\n        \"file_info\": visitor.file_info,\n        \"functions\": visitor.functions,\n        \"classes\": visitor.classes,\n    }\n\n    # get code graph items and add to file_details\n    file_summary = file_details[\"file_info\"][\"file_summary\"]\n    file_ast = file_details[\"file_info\"][\"file_ast\"]\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(\n        file_summary, file_ast\n    )\n    file_details[\"file_info\"][\"entire_code_graph\"] = entire_code_graph\n    file_details[\"file_info\"][\"control_flow_structure\"] = control_flow_structure\n    file_details[\"file_info\"][\"plant_uml\"] = plant_uml\n    file_details[\"file_info\"][\"file_summary\"] = json.dumps(file_summary).replace(\n        '\"', \"\"\n    )\n    del file_details[\"file_info\"][\"file_ast\"]\n\n    return file_details\n\n```",
        "output": "{'nodes': ['CodeVisitor', 'CodeVisitor.__init__', 'CodeVisitor.visit_FunctionDef', 'CodeVisitor.visit_ClassDef', 'CodeVisitor.generic_visit', 'CodeVisitor.visit_Assign', 'CodeVisitor.extract_details', 'CodeVisitor.analyze', 'remove_docstring', 'get_all_calls', 'get_python_file_details', 'isinstance', 'tree.body.pop', 'ast.walk', 'node.body.pop', 'ast.unparse', 'calls.append', 'ast.iter_child_nodes', 'calls_dict[func].extend', 'open', 'f.read', 'ast.parse', 'logging.warning', 'visitor.analyze', 'get_code_graph', 'json.dumps(file_summary).replace', 'json.dumps', 'self.visit', 'self.constants.append', 'list', 'set', 'next', 'call_data.keys', 'self.classes[self.current_class].setdefault', 'details.update', 'any', 'self.functions.items', 'len', 'class_details.items', 'method_name.startswith', 'self.classes.items', 'self.functions.keys', 'self.classes.keys'], 'edges': [{'source': 'CodeVisitor', 'target': 'CodeVisitor.__init__', 'target_inputs': ['self', 'code', 'tree'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_FunctionDef', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_ClassDef', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.generic_visit', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.visit_Assign', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.extract_details', 'target_inputs': ['self', 'node', 'node_type'], 'target_returns': ['details']}, {'source': 'CodeVisitor', 'target': 'CodeVisitor.analyze', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor.visit_FunctionDef', 'target': 'CodeVisitor.extract_details', 'target_inputs': ['self', 'node', 'node_type'], 'target_returns': ['details']}, {'source': 'CodeVisitor.visit_FunctionDef', 'target': 'CodeVisitor.generic_visit', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor.visit_ClassDef', 'target': 'CodeVisitor.extract_details', 'target_inputs': ['self', 'node', 'node_type'], 'target_returns': ['details']}, {'source': 'CodeVisitor.visit_ClassDef', 'target': 'CodeVisitor.generic_visit', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor.generic_visit', 'target': 'ast.iter_child_nodes', 'target_inputs': ['node']}, {'source': 'CodeVisitor.generic_visit', 'target': 'self.visit', 'target_inputs': ['child']}, {'source': 'CodeVisitor.visit_Assign', 'target': 'isinstance', 'target_inputs': ['node.parent', 'ast.Module', 'target', 'ast.Name', 'value', 'ast.Constant', 'value.value', 'str']}, {'source': 'CodeVisitor.visit_Assign', 'target': 'ast.unparse', 'target_inputs': ['value']}, {'source': 'CodeVisitor.visit_Assign', 'target': 'self.constants.append', 'target_inputs': ['constant_assignment']}, {'source': 'CodeVisitor.visit_Assign', 'target': 'CodeVisitor.generic_visit', 'target_inputs': ['self', 'node'], 'target_returns': []}, {'source': 'CodeVisitor.extract_details', 'target': 'list', 'target_inputs': ['ast.walk(node)', '{ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)}', 'set(node_inputs + node_variables)', 'call_data.keys()', '{ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()', '{ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}', '{ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)}']}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.walk', 'target_inputs': ['node']}, {'source': 'CodeVisitor.extract_details', 'target': 'get_all_calls', 'target_inputs': ['node'], 'target_returns': ['calls_dict']}, {'source': 'CodeVisitor.extract_details', 'target': 'ast.unparse', 'target_inputs': ['target', 'node', 'd', 'subnode.value', 'decorator', 'subnode.annotation', 'subnode', 'base']}, {'source': 'CodeVisitor.extract_details', 'target': 'isinstance', 'target_inputs': ['subnode', 'ast.Assign', 'target', 'ast.Name', 'n', 'ast.Expr', 'n.value', 'ast.Str', 'subnode', 'ast.Return', 'subnode', 'ast.AnnAssign', 'subnode', 'ast.Attribute', 'subnode.ctx', 'ast.Store', 'subnode', 'ast.Assign', 'target', 'ast.Attribute', 'target.value', 'ast.Name', 'subnode', 'ast.Assign', 'target', 'ast.Attribute', 'subnode', 'ast.FunctionDef', 'subnode', 'ast.FunctionDef', 'decorator', 'ast.Name']}, {'source': 'CodeVisitor.extract_details', 'target': 'set', 'target_inputs': ['node_inputs + node_variables']}, {'source': 'CodeVisitor.extract_details', 'target': 'next', 'target_inputs': ['(n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str))', 'None']}, {'source': 'CodeVisitor.extract_details', 'target': 'call_data.keys', 'target_inputs': []}, {'source': 'CodeVisitor.extract_details', 'target': 'self.classes[self.current_class].setdefault', 'target_inputs': [\"'class_attributes'\", '[]']}, {'source': 'CodeVisitor.extract_details', 'target': 'details.update', 'target_inputs': [\"{'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]}\"]}, {'source': 'CodeVisitor.extract_details', 'target': 'any', 'target_inputs': [\"(isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list)\"]}, {'source': 'CodeVisitor.analyze', 'target': 'self.visit', 'target_inputs': ['node']}, {'source': 'CodeVisitor.analyze', 'target': 'list', 'target_inputs': ['ast.walk(node)', 'file_dependencies', 'self.functions.keys()', 'self.classes.keys()', 'file_dependencies']}, {'source': 'CodeVisitor.analyze', 'target': 'ast.walk', 'target_inputs': ['node']}, {'source': 'CodeVisitor.analyze', 'target': 'isinstance', 'target_inputs': ['subnode', 'ast.Import', 'subnode', 'ast.ImportFrom']}, {'source': 'CodeVisitor.analyze', 'target': 'self.functions.items', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'len', 'target_inputs': [\"'class_method_'\"]}, {'source': 'CodeVisitor.analyze', 'target': 'class_details.items', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'method_name.startswith', 'target_inputs': [\"'class_method_'\"]}, {'source': 'CodeVisitor.analyze', 'target': 'self.classes.items', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'self.functions.keys', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'self.classes.keys', 'target_inputs': []}, {'source': 'CodeVisitor.analyze', 'target': 'remove_docstring', 'target_inputs': ['ast.unparse(node)', 'self.tree'], 'target_returns': ['ast.unparse(tree)']}, {'source': 'CodeVisitor.analyze', 'target': 'ast.unparse', 'target_inputs': ['node']}, {'source': 'remove_docstring', 'target': 'isinstance', 'target_inputs': ['tree.body[0]', 'ast.Expr', 'tree.body[0].value', 'ast.Str', 'node', '(ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)', 'first_body_node', 'ast.Expr', 'first_body_node.value', 'ast.Str']}, {'source': 'remove_docstring', 'target': 'tree.body.pop', 'target_inputs': ['0']}, {'source': 'remove_docstring', 'target': 'ast.walk', 'target_inputs': ['tree']}, {'source': 'remove_docstring', 'target': 'node.body.pop', 'target_inputs': ['0']}, {'source': 'remove_docstring', 'target': 'ast.unparse', 'target_inputs': ['tree']}, {'source': 'get_all_calls', 'target': 'isinstance', 'target_inputs': ['node', 'ast.Call', 'node', 'ast.ClassDef', 'body_item', 'ast.Assign', 'body_item.targets[0]', 'ast.Name']}, {'source': 'get_all_calls', 'target': 'calls.append', 'target_inputs': ['(ast.unparse(node.func), [ast.unparse(arg) for arg in node.args])']}, {'source': 'get_all_calls', 'target': 'ast.unparse', 'target_inputs': ['node.func', 'arg']}, {'source': 'get_all_calls', 'target': 'get_all_calls', 'target_inputs': ['body_item.value', 'calls', 'child', 'calls'], 'target_returns': ['calls_dict']}, {'source': 'get_all_calls', 'target': 'ast.iter_child_nodes', 'target_inputs': ['node']}, {'source': 'get_all_calls', 'target': 'calls_dict[func].extend', 'target_inputs': ['args']}, {'source': 'get_python_file_details', 'target': 'open', 'target_inputs': ['file_path', \"'r'\"]}, {'source': 'get_python_file_details', 'target': 'f.read', 'target_inputs': []}, {'source': 'get_python_file_details', 'target': 'ast.parse', 'target_inputs': ['code']}, {'source': 'get_python_file_details', 'target': 'logging.warning', 'target_inputs': [\"f'{e} error in file: {file_path}'\"]}, {'source': 'get_python_file_details', 'target': 'CodeVisitor', 'target_inputs': ['code', 'tree'], 'target_returns': []}, {'source': 'get_python_file_details', 'target': 'visitor.analyze', 'target_inputs': ['tree']}, {'source': 'get_python_file_details', 'target': 'get_code_graph', 'target_inputs': ['file_summary', 'file_ast']}, {'source': 'get_python_file_details', 'target': 'json.dumps(file_summary).replace', 'target_inputs': ['\\'\"\\'', \"''\"]}, {'source': 'get_python_file_details', 'target': 'json.dumps', 'target_inputs': ['file_summary']}]}"
    },
    {
        "instruction": "Functions in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\n\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docstring` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport logging\nimport json\nfrom typing import Dict, List, Union\nfrom get_code_graph import get_code_graph\n\n\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if (\n        tree.body\n        and isinstance(tree.body[0], ast.Expr)\n        and isinstance(tree.body[0].value, ast.Str)\n    ):\n        tree.body.pop(0)\n\n    for node in ast.walk(tree):\n        if (\n            isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef))\n            and node.body\n        ):\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(\n                first_body_node.value, ast.Str\n            ):\n                node.body.pop(0)\n\n    return ast.unparse(tree)\n\n\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(\n                body_item.targets[0], ast.Name\n            ):\n                get_all_calls(body_item.value, calls)\n\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n\n    # Build the dictionary after traversal\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n\n    return calls_dict\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(\n            node, \"method\" if self.current_class else \"function\"\n        )\n        if self.current_class:\n            self.classes[self.current_class][f\"class_method_{node.name}\"] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(\n            node, \"class\"\n        )  # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node)  # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f\"{target.id}={value_repr}\"\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(\n        self, node: ast.AST, node_type: str\n    ) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = (\n            [arg.arg for arg in node.args.args]\n            if node_type in [\"function\", \"method\"]\n            else None\n        )\n        node_variables = list(\n            {\n                ast.unparse(target)\n                for subnode in node_walk\n                if isinstance(subnode, ast.Assign)\n                for target in subnode.targets\n                if isinstance(target, ast.Name)\n            }\n        )\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n\n        details = {\n            f\"{node_type}_name\": node.name,\n            f\"{node_type}_code\": ast.unparse(node),\n            f\"{node_type}_docstring\": next(\n                (\n                    n.value.s\n                    for n in node_walk\n                    if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)\n                ),\n                None,\n            ),\n            f\"{node_type}_inputs\": node_inputs,\n            f\"{node_type}_defaults\": [ast.unparse(d) for d in node.args.defaults]\n            if node_type in [\"function\", \"method\"]\n            else None,\n            f\"{node_type}_returns\": [\n                ast.unparse(subnode.value) if subnode.value is not None else \"None\"\n                for subnode in node_walk\n                if isinstance(subnode, ast.Return)\n            ],\n            f\"{node_type}_calls\": list(call_data.keys()),\n            f\"{node_type}_call_inputs\": call_data,\n            f\"{node_type}_variables\": node_variables,\n            f\"{node_type}_decorators\": list(\n                {ast.unparse(decorator) for decorator in node.decorator_list}\n                if node.decorator_list\n                else set()\n            ),\n            f\"{node_type}_annotations\": list(\n                {\n                    ast.unparse(subnode.annotation)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.AnnAssign)\n                    and subnode.annotation is not None\n                }\n            ),\n            f\"{node_type}_properties\": list(\n                {\n                    ast.unparse(subnode)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Attribute)\n                    and isinstance(subnode.ctx, ast.Store)\n                }\n            ),\n        }\n        if node_type in [\"class\", \"method\"]:\n            if (\n                node_type == \"method\" and self.current_class\n            ):  # find attributes defined as self.attribute\n                attributes = [\n                    target.attr\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Assign)\n                    for target in subnode.targets\n                    if isinstance(target, ast.Attribute)\n                    and isinstance(target.value, ast.Name)\n                    and target.value.id == \"self\"\n                ]\n                class_attributes = self.classes[self.current_class].setdefault(\n                    \"class_attributes\", []\n                )\n                class_attributes += attributes\n            if node_type == \"class\":\n                details.update(\n                    {\n                        \"class_attributes\": [\n                            target.attr\n                            for subnode in node.body\n                            if isinstance(subnode, ast.Assign)\n                            for target in subnode.targets\n                            if isinstance(target, ast.Attribute)\n                        ],\n                        \"class_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                        ],\n                        \"class_inheritance\": [ast.unparse(base) for base in node.bases]\n                        if node.bases\n                        else [],\n                        \"class_static_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                            and any(\n                                isinstance(decorator, ast.Name)\n                                and decorator.id == \"staticmethod\"\n                                for decorator in subnode.decorator_list\n                            )\n                        ],\n                    }\n                )\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        # Traverse the AST to capture various code details\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n\n        file_dependencies = {\n            alias.name\n            for subnode in node_walk\n            if isinstance(subnode, ast.Import)\n            for alias in subnode.names\n        } | {\n            subnode.module\n            for subnode in node_walk\n            if isinstance(subnode, ast.ImportFrom)\n        }\n\n        function_defs = [\n            {\n                func_name: {\n                    \"inputs\": details[\"function_inputs\"],\n                    \"calls\": details[\"function_calls\"],\n                    \"call_inputs\": details[\"function_call_inputs\"],\n                    \"returns\": details[\"function_returns\"],\n                }\n            }\n            for func_name, details in self.functions.items()\n        ]\n\n        class_defs = [\n            {\n                class_name: {\n                    \"method_defs\": {\n                        method_name[len(\"class_method_\") :]: {\n                            \"inputs\": details[\"method_inputs\"],\n                            \"calls\": details[\"method_calls\"],\n                            \"call_inputs\": details[\"method_call_inputs\"],\n                            \"returns\": details[\"method_returns\"],\n                        }\n                        for method_name, details in class_details.items()\n                        if method_name.startswith(\"class_method_\")\n                    }\n                }\n            }\n            for class_name, class_details in self.classes.items()\n        ]\n\n        self.file_info = {\n            \"file_code\": self.code,\n            \"file_ast\": node,\n            \"file_dependencies\": list(file_dependencies),\n            \"file_functions\": list(self.functions.keys()),\n            \"file_classes\": list(self.classes.keys()),\n            \"file_constants\": self.constants,\n            \"file_summary\": {\n                \"dependencies\": list(file_dependencies),\n                \"function_defs\": function_defs,\n                \"class_defs\": class_defs,\n            },\n            \"file_code_simplified\": remove_docstring(ast.unparse(node), self.tree),\n        }\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {\n        \"file_info\": visitor.file_info,\n        \"functions\": visitor.functions,\n        \"classes\": visitor.classes,\n    }\n\n    # get code graph items and add to file_details\n    file_summary = file_details[\"file_info\"][\"file_summary\"]\n    file_ast = file_details[\"file_info\"][\"file_ast\"]\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(\n        file_summary, file_ast\n    )\n    file_details[\"file_info\"][\"entire_code_graph\"] = entire_code_graph\n    file_details[\"file_info\"][\"control_flow_structure\"] = control_flow_structure\n    file_details[\"file_info\"][\"plant_uml\"] = plant_uml\n    file_details[\"file_info\"][\"file_summary\"] = json.dumps(file_summary).replace(\n        '\"', \"\"\n    )\n    del file_details[\"file_info\"][\"file_ast\"]\n\n    return file_details\n\n```",
        "output": "'remove_docstring', 'get_all_calls', 'get_python_file_details'\n\nPurpose and Significance:\n1. remove_docstring: Purpose and Significance:\n   This function eliminates docstrings from given Python source code while preserving syntax integrity. Docstrings include top-level module docstrings, comments within functions, classes, and async functions embedded in the Abstract Syntax Tree (AST). It helps simplify code analysis by excluding explanatory strings to focus on the actual code logic.\n   Function Operation:\n   - Checks if root node holds a docstring and removes it if applicable.\n   - Recursively traverses the tree to identify and remove docstrings within function definitions (FunctionDef, ClassDef, AsyncFunctionDef) using ast.unparse().\n   Input Parameters: Python code string ('code') and AST representation ('tree').\n   Return Value: Sanitized Python code string without docstrings after applying ast.unparse() on 'tree'.\n\n2. get_all_calls: Purpose and Significance:\n   This function finds all occurrences of function calls within a specific node subtree, extending its reach to include list comprehensions and lambda functions as well. It creates a dictionary mapping function calls as strings with their arguments lists for easier analysis.\n   Function Operation:\n   - Initializes accumulator 'calls' as an empty list if not provided ('calls is None').\n   - Append call details when encountering Ast.Call node into 'calls'.\n   - For class attribute definitions (ClassDef nodes), recursively invokes get_all_calls() using parentage relation of ast nodes to build up a calls dictionary.\n   Input Parameters: Node within AST ('node'), optional argument 'calls' as an accumulator list.\n   Return Value: Dictionary mapping function calls (as strings) to lists of their arguments ('calls_dict').\n\n3. get_python_file_details: Purpose and Significance:\n   This comprehensive function extracts information from a Python file specified by 'file_path' into a structured dictionary format for easy accessibility and analysis. It combines various code details with graph representation using external functions like CodeVisitor class instantiation, AST traversal, and JSON serialization.\n   Function Operation:\n   - Opens the input file in read mode ('open()').\n   - Parses the code into an Abstract Syntax Tree ('ast.parse()').\n   - Instantiates CodeVisitor with source code and its respective AST tree ('CodeVisitor(code, tree)').\n   - Analyzes the AST using analyze() method on CodeVisitor instance to extract data ('visitor.analyze(tree)').\n   - Constructs a directed graph representing code call relationships ('get_code_graph()').\n   - Serializes file summary JSON data for convenient representation ('json.dumps(file_summary).replace()').\n   Input Parameter: Python file path ('file_path').\n   Exception Handling: If any errors occur, it returns None to signify unsuccessful operation.\n''"
    },
    {
        "instruction": "Classes in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\n\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docstring` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport logging\nimport json\nfrom typing import Dict, List, Union\nfrom get_code_graph import get_code_graph\n\n\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if (\n        tree.body\n        and isinstance(tree.body[0], ast.Expr)\n        and isinstance(tree.body[0].value, ast.Str)\n    ):\n        tree.body.pop(0)\n\n    for node in ast.walk(tree):\n        if (\n            isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef))\n            and node.body\n        ):\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(\n                first_body_node.value, ast.Str\n            ):\n                node.body.pop(0)\n\n    return ast.unparse(tree)\n\n\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(\n                body_item.targets[0], ast.Name\n            ):\n                get_all_calls(body_item.value, calls)\n\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n\n    # Build the dictionary after traversal\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n\n    return calls_dict\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(\n            node, \"method\" if self.current_class else \"function\"\n        )\n        if self.current_class:\n            self.classes[self.current_class][f\"class_method_{node.name}\"] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(\n            node, \"class\"\n        )  # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node)  # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f\"{target.id}={value_repr}\"\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(\n        self, node: ast.AST, node_type: str\n    ) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = (\n            [arg.arg for arg in node.args.args]\n            if node_type in [\"function\", \"method\"]\n            else None\n        )\n        node_variables = list(\n            {\n                ast.unparse(target)\n                for subnode in node_walk\n                if isinstance(subnode, ast.Assign)\n                for target in subnode.targets\n                if isinstance(target, ast.Name)\n            }\n        )\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n\n        details = {\n            f\"{node_type}_name\": node.name,\n            f\"{node_type}_code\": ast.unparse(node),\n            f\"{node_type}_docstring\": next(\n                (\n                    n.value.s\n                    for n in node_walk\n                    if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)\n                ),\n                None,\n            ),\n            f\"{node_type}_inputs\": node_inputs,\n            f\"{node_type}_defaults\": [ast.unparse(d) for d in node.args.defaults]\n            if node_type in [\"function\", \"method\"]\n            else None,\n            f\"{node_type}_returns\": [\n                ast.unparse(subnode.value) if subnode.value is not None else \"None\"\n                for subnode in node_walk\n                if isinstance(subnode, ast.Return)\n            ],\n            f\"{node_type}_calls\": list(call_data.keys()),\n            f\"{node_type}_call_inputs\": call_data,\n            f\"{node_type}_variables\": node_variables,\n            f\"{node_type}_decorators\": list(\n                {ast.unparse(decorator) for decorator in node.decorator_list}\n                if node.decorator_list\n                else set()\n            ),\n            f\"{node_type}_annotations\": list(\n                {\n                    ast.unparse(subnode.annotation)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.AnnAssign)\n                    and subnode.annotation is not None\n                }\n            ),\n            f\"{node_type}_properties\": list(\n                {\n                    ast.unparse(subnode)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Attribute)\n                    and isinstance(subnode.ctx, ast.Store)\n                }\n            ),\n        }\n        if node_type in [\"class\", \"method\"]:\n            if (\n                node_type == \"method\" and self.current_class\n            ):  # find attributes defined as self.attribute\n                attributes = [\n                    target.attr\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Assign)\n                    for target in subnode.targets\n                    if isinstance(target, ast.Attribute)\n                    and isinstance(target.value, ast.Name)\n                    and target.value.id == \"self\"\n                ]\n                class_attributes = self.classes[self.current_class].setdefault(\n                    \"class_attributes\", []\n                )\n                class_attributes += attributes\n            if node_type == \"class\":\n                details.update(\n                    {\n                        \"class_attributes\": [\n                            target.attr\n                            for subnode in node.body\n                            if isinstance(subnode, ast.Assign)\n                            for target in subnode.targets\n                            if isinstance(target, ast.Attribute)\n                        ],\n                        \"class_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                        ],\n                        \"class_inheritance\": [ast.unparse(base) for base in node.bases]\n                        if node.bases\n                        else [],\n                        \"class_static_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                            and any(\n                                isinstance(decorator, ast.Name)\n                                and decorator.id == \"staticmethod\"\n                                for decorator in subnode.decorator_list\n                            )\n                        ],\n                    }\n                )\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        # Traverse the AST to capture various code details\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n\n        file_dependencies = {\n            alias.name\n            for subnode in node_walk\n            if isinstance(subnode, ast.Import)\n            for alias in subnode.names\n        } | {\n            subnode.module\n            for subnode in node_walk\n            if isinstance(subnode, ast.ImportFrom)\n        }\n\n        function_defs = [\n            {\n                func_name: {\n                    \"inputs\": details[\"function_inputs\"],\n                    \"calls\": details[\"function_calls\"],\n                    \"call_inputs\": details[\"function_call_inputs\"],\n                    \"returns\": details[\"function_returns\"],\n                }\n            }\n            for func_name, details in self.functions.items()\n        ]\n\n        class_defs = [\n            {\n                class_name: {\n                    \"method_defs\": {\n                        method_name[len(\"class_method_\") :]: {\n                            \"inputs\": details[\"method_inputs\"],\n                            \"calls\": details[\"method_calls\"],\n                            \"call_inputs\": details[\"method_call_inputs\"],\n                            \"returns\": details[\"method_returns\"],\n                        }\n                        for method_name, details in class_details.items()\n                        if method_name.startswith(\"class_method_\")\n                    }\n                }\n            }\n            for class_name, class_details in self.classes.items()\n        ]\n\n        self.file_info = {\n            \"file_code\": self.code,\n            \"file_ast\": node,\n            \"file_dependencies\": list(file_dependencies),\n            \"file_functions\": list(self.functions.keys()),\n            \"file_classes\": list(self.classes.keys()),\n            \"file_constants\": self.constants,\n            \"file_summary\": {\n                \"dependencies\": list(file_dependencies),\n                \"function_defs\": function_defs,\n                \"class_defs\": class_defs,\n            },\n            \"file_code_simplified\": remove_docstring(ast.unparse(node), self.tree),\n        }\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {\n        \"file_info\": visitor.file_info,\n        \"functions\": visitor.functions,\n        \"classes\": visitor.classes,\n    }\n\n    # get code graph items and add to file_details\n    file_summary = file_details[\"file_info\"][\"file_summary\"]\n    file_ast = file_details[\"file_info\"][\"file_ast\"]\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(\n        file_summary, file_ast\n    )\n    file_details[\"file_info\"][\"entire_code_graph\"] = entire_code_graph\n    file_details[\"file_info\"][\"control_flow_structure\"] = control_flow_structure\n    file_details[\"file_info\"][\"plant_uml\"] = plant_uml\n    file_details[\"file_info\"][\"file_summary\"] = json.dumps(file_summary).replace(\n        '\"', \"\"\n    )\n    del file_details[\"file_info\"][\"file_ast\"]\n\n    return file_details\n\n```",
        "output": "'CodeVisitor'\n\nPurpose and Significance:\n**CodeVisitor:**\nThis Python class plays a significant role in extracting comprehensive details about a given Python source code by traversing its Abstract Syntax Tree (AST) through inheritance from `ast.NodeVisitor`. It serves as a visitor object to analyze and gather information related to functions, classes, constants, dependencies, etc., within the provided codebase.\n\nPurpose: To parse an input Python file's AST efficiently and systematically extract vital elements required for software documentation or further analysis purposes.\n\nKey Responsibilities Include:\n1. **Initialization**: Upon instantiation, `CodeVisitor` assigns input Python code ('self.code') and its respective AST representation ('self.tree'). It also initializes empty dictionaries to store extracted details about functions ('self.functions'), classes ('self.classes'), and overall file information ('self.file_info'). Additionally, it sets `self.current_class` as a flag indicating whether traversal is within a class context (True) or not (False).\n2. **visit_FunctionDef**: Extracts details about functions present outside any class scope by calling the `extract_details()` method with 'function' as node type and stores them in 'self.functions'.\n3. **visit_ClassDef**: Extracts details about classes within a class context setting `self.current_class`. The obtained information is stored in 'self.classes'.\n4. **generic_visit**: Handles nodes without explicit visitor functions by recursively traversing the AST using `ast.iter_child_nodes()`.\n5. **visit_Assign**: Collects constant assignments in the top-level module scope ('self.constants').\n6. **extract_details**: Extracts node details based on its type ('node_type') by walking through the AST with `ast.walk()` and gathers call data using `get_all_calls()`. It returns a dictionary containing specific information for each node analyzed, such as inputs, calls, returns, dependencies, etc.\n7. **analyze**: Traverses the entire Abstract Syntax Tree ('node') to populate 'file_info' with extracted code aspects. It builds 'file_summary', a simplified representation of functions and classes found within the code file, constructs 'file_dependencies', collects constants, etc. Moreover, `CodeVisitor` instantiates a Graph based on file analysis via an external function get_code_graph(). This helps capture Control Flow structure of functions along with entire Call graph of code entities within 'plantuml' for generating software architecture documentation visually or additional analytics usage.\n\nWith the assistance of various processing approaches explained in `visit_xx()` methods and extraction functions, CodeVisitor generates detailed output related to the input Python source file making it instrumental for deep inspection, interpretation, debugging or documenting code behavior."
    },
    {
        "instruction": "1) Describe the overall Purpose and Processing Approach of Python file: `py2dataset\\get_python_file_details.py`; 2) Define API Signatures for each applicable Function and Class Method; 3) Derive Functional Requirements to specify the code's behavior and purpose; 4) Explain what each variable does in the code.",
        "input": "```python\n\"\"\"\nReturn file_details dictionary for python source code.\nRequirements:\n[req00] The `remove_docstring` function shall:\n        a. Accept a Python code string as an argument.\n        b. Remove docstrings and comments from the provided code.\n        c. Return the sanitized code string.\n[req01] The get_all_calls function shall:\n        a. Accept a node of type ast.AST as an argument.\n        b. Recursively find all function calls in the subtree rooted at the node.\n        c. Return a dictionary of all function calls in the subtree rooted at the node.\n[req02] The `CodeVisitor` class shall:\n        a. Accept the source code as input when instantiated.\n        b. Use the AST to extract details about the code.\n        c. Inherit from `ast.NodeVisitor`.\n        d. Implement `visit_FunctionDef` method to gather details about functions.\n        e. Implement `visit_ClassDef` method to gather details about classes.\n        f. Implement `extract_details` method to parse information about a given node.\n        g. Implement `analyze` method to traverse the AST and 'file_info'. \n        h. Maintain a current class context using the attribute 'current_class'.\n[req03] The `code_graph` function shall:\n        a. Accept the file summary as input.\n        b. Construct a directed graph with nodes and edges using networkx library.\n        c. Define elements such as function nodes, class nodes, and method nodes.\n        d. Specify edges to represent relationships. \n        e. Return a dictionary representation of the code call graph. \n[req04] The `get_python_file_details` function shall:\n        a. Accept a file path as an argument.\n        b. Extract info from Python file using the AST and the `CodeVisitor` class.\n        c. Include the entire code graph in the returned details.\n        d. Return a dictionary encompassing the extracted file details. \n\"\"\"\nimport ast\nimport logging\nimport json\nfrom typing import Dict, List, Union\nfrom get_code_graph import get_code_graph\n\n\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if (\n        tree.body\n        and isinstance(tree.body[0], ast.Expr)\n        and isinstance(tree.body[0].value, ast.Str)\n    ):\n        tree.body.pop(0)\n\n    for node in ast.walk(tree):\n        if (\n            isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef))\n            and node.body\n        ):\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(\n                first_body_node.value, ast.Str\n            ):\n                node.body.pop(0)\n\n    return ast.unparse(tree)\n\n\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(\n                body_item.targets[0], ast.Name\n            ):\n                get_all_calls(body_item.value, calls)\n\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n\n    # Build the dictionary after traversal\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n\n    return calls_dict\n\n\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(\n            node, \"method\" if self.current_class else \"function\"\n        )\n        if self.current_class:\n            self.classes[self.current_class][f\"class_method_{node.name}\"] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(\n            node, \"class\"\n        )  # populate class dictionary when class definition found in AST\n        self.current_class = node.name  # set current_class to indicate inside a class\n        self.generic_visit(node)  # continue AST traversal to the next node\n        self.current_class = None  # reset current_class when finished with this class\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f\"{target.id}={value_repr}\"\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(\n        self, node: ast.AST, node_type: str\n    ) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = (\n            [arg.arg for arg in node.args.args]\n            if node_type in [\"function\", \"method\"]\n            else None\n        )\n        node_variables = list(\n            {\n                ast.unparse(target)\n                for subnode in node_walk\n                if isinstance(subnode, ast.Assign)\n                for target in subnode.targets\n                if isinstance(target, ast.Name)\n            }\n        )\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n\n        details = {\n            f\"{node_type}_name\": node.name,\n            f\"{node_type}_code\": ast.unparse(node),\n            f\"{node_type}_docstring\": next(\n                (\n                    n.value.s\n                    for n in node_walk\n                    if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)\n                ),\n                None,\n            ),\n            f\"{node_type}_inputs\": node_inputs,\n            f\"{node_type}_defaults\": [ast.unparse(d) for d in node.args.defaults]\n            if node_type in [\"function\", \"method\"]\n            else None,\n            f\"{node_type}_returns\": [\n                ast.unparse(subnode.value) if subnode.value is not None else \"None\"\n                for subnode in node_walk\n                if isinstance(subnode, ast.Return)\n            ],\n            f\"{node_type}_calls\": list(call_data.keys()),\n            f\"{node_type}_call_inputs\": call_data,\n            f\"{node_type}_variables\": node_variables,\n            f\"{node_type}_decorators\": list(\n                {ast.unparse(decorator) for decorator in node.decorator_list}\n                if node.decorator_list\n                else set()\n            ),\n            f\"{node_type}_annotations\": list(\n                {\n                    ast.unparse(subnode.annotation)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.AnnAssign)\n                    and subnode.annotation is not None\n                }\n            ),\n            f\"{node_type}_properties\": list(\n                {\n                    ast.unparse(subnode)\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Attribute)\n                    and isinstance(subnode.ctx, ast.Store)\n                }\n            ),\n        }\n        if node_type in [\"class\", \"method\"]:\n            if (\n                node_type == \"method\" and self.current_class\n            ):  # find attributes defined as self.attribute\n                attributes = [\n                    target.attr\n                    for subnode in node_walk\n                    if isinstance(subnode, ast.Assign)\n                    for target in subnode.targets\n                    if isinstance(target, ast.Attribute)\n                    and isinstance(target.value, ast.Name)\n                    and target.value.id == \"self\"\n                ]\n                class_attributes = self.classes[self.current_class].setdefault(\n                    \"class_attributes\", []\n                )\n                class_attributes += attributes\n            if node_type == \"class\":\n                details.update(\n                    {\n                        \"class_attributes\": [\n                            target.attr\n                            for subnode in node.body\n                            if isinstance(subnode, ast.Assign)\n                            for target in subnode.targets\n                            if isinstance(target, ast.Attribute)\n                        ],\n                        \"class_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                        ],\n                        \"class_inheritance\": [ast.unparse(base) for base in node.bases]\n                        if node.bases\n                        else [],\n                        \"class_static_methods\": [\n                            subnode.name\n                            for subnode in node.body\n                            if isinstance(subnode, ast.FunctionDef)\n                            and any(\n                                isinstance(decorator, ast.Name)\n                                and decorator.id == \"staticmethod\"\n                                for decorator in subnode.decorator_list\n                            )\n                        ],\n                    }\n                )\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        # Traverse the AST to capture various code details\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n\n        file_dependencies = {\n            alias.name\n            for subnode in node_walk\n            if isinstance(subnode, ast.Import)\n            for alias in subnode.names\n        } | {\n            subnode.module\n            for subnode in node_walk\n            if isinstance(subnode, ast.ImportFrom)\n        }\n\n        function_defs = [\n            {\n                func_name: {\n                    \"inputs\": details[\"function_inputs\"],\n                    \"calls\": details[\"function_calls\"],\n                    \"call_inputs\": details[\"function_call_inputs\"],\n                    \"returns\": details[\"function_returns\"],\n                }\n            }\n            for func_name, details in self.functions.items()\n        ]\n\n        class_defs = [\n            {\n                class_name: {\n                    \"method_defs\": {\n                        method_name[len(\"class_method_\") :]: {\n                            \"inputs\": details[\"method_inputs\"],\n                            \"calls\": details[\"method_calls\"],\n                            \"call_inputs\": details[\"method_call_inputs\"],\n                            \"returns\": details[\"method_returns\"],\n                        }\n                        for method_name, details in class_details.items()\n                        if method_name.startswith(\"class_method_\")\n                    }\n                }\n            }\n            for class_name, class_details in self.classes.items()\n        ]\n\n        self.file_info = {\n            \"file_code\": self.code,\n            \"file_ast\": node,\n            \"file_dependencies\": list(file_dependencies),\n            \"file_functions\": list(self.functions.keys()),\n            \"file_classes\": list(self.classes.keys()),\n            \"file_constants\": self.constants,\n            \"file_summary\": {\n                \"dependencies\": list(file_dependencies),\n                \"function_defs\": function_defs,\n                \"class_defs\": class_defs,\n            },\n            \"file_code_simplified\": remove_docstring(ast.unparse(node), self.tree),\n        }\n\n\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f\"{e} error in file: {file_path}\")\n        return None\n\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {\n        \"file_info\": visitor.file_info,\n        \"functions\": visitor.functions,\n        \"classes\": visitor.classes,\n    }\n\n    # get code graph items and add to file_details\n    file_summary = file_details[\"file_info\"][\"file_summary\"]\n    file_ast = file_details[\"file_info\"][\"file_ast\"]\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(\n        file_summary, file_ast\n    )\n    file_details[\"file_info\"][\"entire_code_graph\"] = entire_code_graph\n    file_details[\"file_info\"][\"control_flow_structure\"] = control_flow_structure\n    file_details[\"file_info\"][\"plant_uml\"] = plant_uml\n    file_details[\"file_info\"][\"file_summary\"] = json.dumps(file_summary).replace(\n        '\"', \"\"\n    )\n    del file_details[\"file_info\"][\"file_ast\"]\n\n    return file_details\n\n```",
        "output": "Overall Purpose and Processing Approach of Python File: get_python_file_details.py\nThis Python file offers a set of functions aimed at extracting detailed information about a given Python source code file. It involves several steps to achieve this goal, including removing docstrings from the code, traversing Abstract Syntax Tree (AST) for gathering function and class details, constructing a directed graph representing code call relationships using NetworkX library, and ultimately returning a comprehensive dictionary encompassing extracted file details.\n\n1. remove_docstring(code: str, tree: ast.AST) -> str:\nPurpose: Remove docstrings from the provided Python code string while maintaining syntax integrity by removing top-level module docstrings and docstrings in functions, classes, and async functions within the AST tree 'tree'.\nProcessing Approach:\n- Checks if root node has a docstring and removes it.\n- Traverses the tree recursively to identify docstrings inside function definitions (FunctionDef, ClassDef, AsyncFunctionDef) and removes them from respective nodes using ast.unparse().\nInputs: 'code' (original Python code), 'tree' (AST representation of code).\nCalled Functions/Methods: tree.body.pop(), ast.walk(), node.body.pop(), ast.unparse().\nVariables Used: 'tree', 'code', 'first_body_node'.\nReturn Value: Sanitized Python code string without docstrings ('ast.unparse(tree)').\n\n2. get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\nPurpose: Locate and aggregate all function calls found within the given 'node', which could include occurrences inside list comprehensions and lambda functions too.\nProcessing Approach:\n- Initializes accumulator 'calls' as empty dictionary if none provided ('calls is None').\n- Adds call details to 'calls' after encountering an Ast.Call node with function arguments ('calls.append()').\n- For class attribute definitions (ClassDef nodes), calls get_all_calls() recursively and builds up a calls dictionary using parentage relation of ast nodes.\nInputs: 'node', optional argument 'calls'.\nCalled Functions/Methods: isinstance(), ast.unparse(), ast.iter_child_nodes().\nVariables Used: 'calls', 'calls_dict', 'func', 'args', 'node'.\nReturn Value: Dictionary mapping function calls (as strings) to lists of their arguments ('calls_dict').\n\n3. get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\nPurpose: Acquire information from a Python file specified by 'file_path', structure it into detailed dictionary format for easy access and analysis.\nProcessing Approach:\n- Opens the input file in read mode ('open()').\n- Parses the code using ast module to create an AST ('ast.parse()').\n- Instantiates CodeVisitor class with source code and AST ('CodeVisitor(code, tree)').\n- Analyzes the AST by invoking analyze() method on CodeVisitor instance ('visitor.analyze(tree)').\n- Constructs a directed graph using get_code_graph().\n- Serializes file summary JSON data for easier representation ('json.dumps(file_summary).replace()').\nInputs: 'file_path' (Python file path).\nCalled Functions/Methods: open(), logging.warning(), CodeVisitor('__init__'), get_code_graph(), json.dumps().\nVariables Used: 'tree', 'code', 'file_summary', 'visitor', 'file_path', 'file_details'.\nReturn Value: Dictionary containing extracted file details ('file_details'). If error occurs, returns None.\n\n4. CodeVisitor Class:\nThis class traverses an AST and extracts various code details using NodeVisitor inheritance from ast module for analyzing Python source code.\n4.1.__init__(self, code: str, tree: ast.AST) -> None:\nPurpose: Initialize a new CodeVisitor instance with 'code' and its respective 'tree'.\nProcessing Approach: Assigns attributes ('self', 'code', 'tree').\nInputs: 'self', Python code string ('code'), AST representation ('tree').\n4.2.visit_FunctionDef(node: ast.FunctionDef) -> None:\nPurpose: Extract details about a function within the class context ('self.current_class' is None).\nProcessing Approach: Calls extract_details() with 'function' as node type and stores results in 'functions'.\nInputs: 'self', 'node' (FunctionDef node).\n4.3.visit_ClassDef(self, node: ast.ClassDef) -> None:\nPurpose: Extract details about a class within the class context ('self.current_class' is not None).\nProcessing Approach: Calls extract_details() with 'class' as node type and stores results in 'classes'.\nInputs: 'self', 'node' (ClassDef node).\n4.4.generic_visit(self, node):\nPurpose: Handles nodes without explicit visitor functions by traversing the AST recursively ('ast.iter_child_nodes()').\nProcessing Approach: Invokes self.visit() for each child node.\nInputs: 'self', 'node'.\n4.5.visit_Assign(self, node: ast.Assign):\nPurpose: Collect constant assignments in the top level module scope ('self.constants').\nProcessing Approach: Identifies constants from Assign nodes and appends them to 'self.constants'.\nInputs: 'self', 'node'.\n4.6.extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]:\nPurpose: Extract details about a given node ('node') based on its type ('node_type').\nProcessing Approach: Walks through the AST using ast.walk(), gathers call data with get_all_calls().\nInputs: 'self', 'node', 'node_type'.\n- Builds a dictionary containing node details depending on node type ('details').\n4.7.analyze(self, node: ast.AST) -> None:\nPurpose: Traverse the AST to populate file information dictionary ('file_info') with various code aspects.\nProcessing Approach: Invokes self methods for function and class details extraction, constructs 'file_summary'.\nInputs: 'self', 'node'.\n- Creates lists of functions, classes, constants, dependencies, etc., simplifies code ('remove_docstring()'), and calls get_code_graph().\n\n5. Variables in CodeVisitor Class:\ntree: AST representation of Python source code during initialization.\ncurrent_class: Indicates if traversal is within a class definition context (True) or not (False).\nfile_info: Contains overall details about the analyzed file.\nfunctions: Dictionary containing function details extracted from the code.\nclasses: Dictionary storing class details from the source code."
    },
    {
        "instruction": "Methods in `CodeVisitor` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f'{target.id}={value_repr}'\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n        node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n                class_attributes += attributes\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n        file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n        self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "'__init__', 'visit_FunctionDef', 'visit_ClassDef', 'generic_visit', 'visit_Assign', 'extract_details', 'analyze'\n\nPurpose and Significance:\n\n1. __init__(self, code: str, tree: ast.AST) -> None:\n   Purpose & Significance: Establishes an instance of `CodeVisitor`, setting crucial attributes needed for code traversal and extraction - code input (str), its parsed AST tree representation, initialization of storage containers for functions, classes details, and file information dictionary. This method serves as the constructor for creating a CodeVisitor object ready to analyze Python source code.\n\n2. visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n   Purpose & Significance: Focuses on extracting specific function-related details when traversing the Abstract Syntax Tree (AST). By identifying `FunctionDef` nodes, it invokes `extract_details()`, storing results within the 'functions' dictionary under their respective names. This method plays a role in capturing functional aspects of Python code during analysis.\n\n3. visit_ClassDef(self, node: ast.ClassDef) -> None:\n   Purpose & Significance: Concentrates on class-related details extraction while the `current_class` attribute indicates being within a class context ('self.current_class' is not None). Similar to `visit_FunctionDef()`, it calls `extract_details()` but stores results in 'classes' dictionary instead of 'functions'. This method contributes to understanding classes within Python code during traversal.\n\n4. generic_visit(self, node):\n   Purpose & Significance: Handles nodes without explicit visitor functions by recursively visiting child nodes using `ast.iter_child_nodes()`. It allows for thorough analysis of the AST while covering a wider range of code elements other than Functions or ClassDefs.\n\n5. visit_Assign(self, node: ast.Assign):\n   Purpose & Significance: Identifies constant assignments in the top-level module scope ('self.constants') during traversal. This method helps gather constants present at the file's beginning before function definitions or class declarations.\n\n6. extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]:\n   Purpose & Significance: Extracts detailed information from given nodes ('node') depending on 'node_type', using `ast.walk()` to locate important code elements and aggregating them in a dictionary named 'details'. It creates attributes associated with various nodes during analysis for later use in `file_info`.\n\n7. analyze(self, node: ast.AST) -> None:\n   Purpose & Significance: Traverses the AST to fill the 'file_info' dictionary with numerous code aspects - functions, classes, dependencies, constants, etc., and builds a comprehensive file summary for further processing. Additionally, it prepares for constructing a code graph using `get_code_graph()`. This method organizes overall file data obtained during traversal in an organized format ready to return as `file_details` dictionary later in `get_python_file_details()`."
    },
    {
        "instruction": "Docstring of `CodeVisitor` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f'{target.id}={value_repr}'\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n        node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n                class_attributes += attributes\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n        file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n        self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file."
    },
    {
        "instruction": "Attributes of `CodeVisitor` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f'{target.id}={value_repr}'\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n        node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n                class_attributes += attributes\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n        file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n        self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "'tree', 'current_class', 'current_class', 'file_info'\n\nPurpose and Significance:\n\nIn the `CodeVisitor` class within the given Python script for extracting detailed information from a source code file, several attributes play crucial roles during analysis. These attributes are `'tree'`, `'current_class'`, and `'file_info'`. Each of these variables holds specific responsibilities as follows:\n\n1. `tree`: This attribute represents the Abstract Syntax Tree (AST) representation of Python source code when initializing a new instance of `CodeVisitor`. It serves as an input parameter during instantiation, helping in traversing and extracting essential details about functions, classes, constants, dependencies, etc., from the given code. As the analysis progresses, `tree` acts as a reference point for navigating through different nodes within the AST structure.\n\n2. `current_class`: This attribute indicates whether the current traversal context is inside a class definition or not. It is initially set to `None`, but gets updated when entering a class block (`visit_ClassDef` method). By tracking this context switch, `CodeVisitor` can differentiate between global function definitions and class methods while gathering details about the code constructs during `ast.walk`. Thus `current_class` controls behavior concerning what specific code features (i.e., method assignments in a given ClassDefinition context or top level statements), hence being important in discriminating appropriate nodes to visit within AST traversal.\n\n3. `file_info`: This attribute acts as an accumulator of all file details gathered after thoroughly analyzing the source code with the help of `CodeVisitor`. It contains a dictionary that encapsulates extracted information related to Python files, including simplified sanitized code, dependencies list, functions definitions, class definitions, constants declarations, entire code graph in directed graph format along with its JSON representation, and serialized file summary without quotes for better handling. The `file_info` attribute acts as a container holding comprehensive insights extracted from the processed Python script for easier accessibility. While analyzing each node in AST, various methods within `CodeVisitor` update this dictionary by appending or assigning data relevant to its key value pair format. Once complete analysis is done through `analyze()`, this attribute contains a consolidated set of extracted details about the input file."
    },
    {
        "instruction": "Inheritance of `CodeVisitor` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\nclass CodeVisitor(ast.NodeVisitor):\n    \"\"\"\n    Visitor class for traversing an AST (Abstract Syntax Tree) and extracting details about the code.\n    Attributes:\n        code (str): The source code.\n        functions(Dict): details about functions in the code.\n        classes (Dict): details about classes in the code.\n        file_info (Dict): details about the file.\n    Methods:\n        visit_FunctionDef(node: ast.FunctionDef) -> None:\n            Extract details about a function.\n        visit_ClassDef(node: ast.ClassDef) -> None:\n            Extract details about a class.\n        extract_details(node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n            Extract details about a node.\n        analyze(node: ast.AST) -> None:\n            Populate file_info with details about the file.\n    \"\"\"\n\n    def __init__(self, code: str, tree: ast.AST) -> None:\n        \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n        self.code: str = code\n        self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n        self.file_info: Dict[str, Union[str, List[str]]] = {}\n        self.current_class: str = None\n        self.constants: List[str] = []\n        self.tree = tree\n\n    def visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n        \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n        details = self.extract_details(node, 'method' if self.current_class else 'function')\n        if self.current_class:\n            self.classes[self.current_class][f'class_method_{node.name}'] = details\n        else:\n            self.functions[node.name] = details\n        self.generic_visit(node)\n\n    def visit_ClassDef(self, node: ast.ClassDef) -> None:\n        \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n        self.classes[node.name] = self.extract_details(node, 'class')\n        self.current_class = node.name\n        self.generic_visit(node)\n        self.current_class = None\n\n    def generic_visit(self, node):\n        \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.visit(child)\n\n    def visit_Assign(self, node: ast.Assign):\n        \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n        if isinstance(node.parent, ast.Module):\n            for target in node.targets:\n                if isinstance(target, ast.Name):\n                    value = node.value\n                    if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                        value_repr = f\"'{value.value}'\"\n                    else:\n                        value_repr = ast.unparse(value)\n                    constant_assignment = f'{target.id}={value_repr}'\n                    self.constants.append(constant_assignment)\n        self.generic_visit(node)\n\n    def extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n        \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n        node_walk = list(ast.walk(node))\n        call_data = get_all_calls(node)\n        node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n        node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n        if node_inputs:\n            node_variables = list(set(node_inputs + node_variables))\n        details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n        if node_type in ['class', 'method']:\n            if node_type == 'method' and self.current_class:\n                attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n                class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n                class_attributes += attributes\n            if node_type == 'class':\n                details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n        return details\n\n    def analyze(self, node: ast.AST) -> None:\n        \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n        self.visit(node)\n        node_walk = list(ast.walk(node))\n        file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n        function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n        class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n        self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "'ast.NodeVisitor'\n\nPurpose and Significance:\nThe `CodeVisitor` class in given Python script inherits from `ast.NodeVisitor`, which is an essential component within the `abstract syntax tree` (AST) traversal process for analyzing Python source code. This inheritance allows `CodeVisitor` to leverage features and functionalities of `ast.NodeVisitor` while customizing its behavior according to specific requirements. By extending `ast.NodeVisitor`, `CodeVisitor` can effectively traverse the AST structure, extracting detailed information about functions and classes within a Python file.\n\nThe primary responsibilities of `CodeVisitor` include visiting nodes in an organized manner during traversal and gathering relevant data for each node type encountered. This inheritance enables `CodeVisitor` to implement custom methods like `visit_FunctionDef`, `visit_ClassDef`, `extract_details`, `analyze`, `visit_Assign`, etc., tailored to extract specific details about functions, classes, constants, dependencies, and more. These methods work together to generate a comprehensive dictionary containing file information after analyzing the Abstract Syntax Tree. The combined functionality of `CodeVisitor` with its inheritance from `ast.NodeVisitor` is instrumental in structuring a complete analysis report about the Python source code by collecting relevant statistics for classes, functions, constants, dependencies, call relationships between methods, etc., eventually outputting all findings as a well-organized dictionary format representing the extracted file details."
    },
    {
        "instruction": "Inputs to `CodeVisitor.extract_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n    node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n    if node_inputs:\n        node_variables = list(set(node_inputs + node_variables))\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n            class_attributes += attributes\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details\n```",
        "output": "'self', 'node', 'node_type'\n\nPurpose and Significance:\nIn the context of the CodeVisitor class within get_python_file_details.py, the method `extract_details` plays a crucial role in extracting specific details about nodes encountered during Abstract Syntax Tree (AST) traversal. This function takes three inputs namely 'self', 'node', and 'node_type' to analyze various code elements and store them as attributes within instances of CodeVisitor objects. These parameters have the following significance:\n\n1. 'self': Refers to the instance of the CodeVisitor object invoking `extract_details`. It holds essential information like code string, extracted function and class details, file dependencies, constants list, etc., which are utilized during extraction processes. This self reference allows accessing these attributes for data manipulation within the method scope.\n\n2. 'node': Represents the specific ast node that needs examination at present within traversal. This Ast.AST node can be FunctionDef or ClassDef types where function and class details reside, facilitating detail collection regarding docstrings, calls, variables, returns, inputs, dependencies, inheritance structure, etc., required to understand program aspects during CodeVisitor instantiation with source code input and the tree created after parsing the same using `ast.parse()`.\n\n3. 'node_type': This argument is a string representing the category ('function', 'method', 'class') of the current node under evaluation. Based on its value, extraction operations within extract_details method are executed accordingly, helping segregate function and class information in distinct sections for later use by `analyze()` in CodeVisitor instance. It enables organizing details according to their type for easier retrieval during analysis and presentation as part of file details dictionary in `get_python_file_details()`. Node type ('node_type') dictates which elements must be gathered, like attributes within function/class definitions or properties outside them while navigating through ast walk tree nodes."
    },
    {
        "instruction": "Docstring of `CodeVisitor.extract_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n    node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n    if node_inputs:\n        node_variables = list(set(node_inputs + node_variables))\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n            class_attributes += attributes\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details\n```",
        "output": "Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node."
    },
    {
        "instruction": "Calls made in `CodeVisitor.extract_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n    node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n    if node_inputs:\n        node_variables = list(set(node_inputs + node_variables))\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n            class_attributes += attributes\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details\n```",
        "output": "'list', 'ast.walk', 'get_all_calls', 'ast.unparse', 'isinstance', 'set', 'next', 'call_data.keys', 'self.classes[self.current_class].setdefault', 'details.update', 'any'\n\nPurpose and Significance:\nIn `CodeVisitor.extract_details`, several key functions and operations are utilized to extract detailed information about nodes within a Python source code. Their roles are as follows:\n\n1. `list`: This built-in Python data type serves multiple purposes within `CodeVisitor.extract_details`. It helps create lists storing different types of extracted details related to classes, functions, method inputs, returns, dependencies, etc., forming nested dictionaries in the final result.\n\n2. `ast.walk`: A function from Python's Abstract Syntax Tree (AST) module walks through a given node recursively visiting its children nodes and returning an iterator over them. In `CodeVisitor`, it assists in traversing the AST to gather relevant data for analysis.\n\n3. `get_all_calls`: A user-defined function used in extracting function calls across subtrees within a specific node scope (starting from provided 'node'). It finds all `ast.Call` occurrences within or linked nodes, generating a dictionary of calls with respective arguments lists for each identified function.\n\n4. `ast.unparse`: An ast utility that converts AST back into human-readable Python code format without losing syntactical information. In `CodeVisitor`, it helps maintain the structure of functions and classes while removing docstrings from the source code during sanitization.\n\n5. `isinstance`: This built-in Python function checks if an object belongs to a specific class or inherits from a given type. It ensures accurate handling of node types such as FunctionDef, ClassDef, Str, etc., during extraction in `CodeVisitor`.\n\n6. `set`: A mutable collection that stores unique elements without maintaining order. In `CodeVisitor`, it is used to create sets containing class dependencies or constants for the file details dictionary.\n\n7. `next`: An iterator function returning the next item from an iterable object. Within `CodeVisitor`, it helps extract docstrings by fetching the first string value in nodes with ast.Expr type inside a walk through the AST tree.\n\n8. `call_data.keys()`: Returns a view object providing a list of keys within dictionary 'call_data' generated by `get_all_calls`. This information identifies function names that called other functions for storage in `functions` or `classes`.\n\n9. `self.classes[self.current_class].setdefault`: If 'self.current_class' has no associated key 'class_attributes', setdefault adds a new empty list and returns it as default value to append attributes discovered during class method traversal in `CodeVisitor`. Else, updates the existing one.\n\n10. `details.update`: A Python dictionary update operation that merges two dictionaries together into one by replacing keys with values from the second dictionary if they exist in both, else appending new ones. In `CodeVisitor`, it combines extracted details for classes and functions into respective nested dictionaries within 'file_info'.\n\n11. `any`: A built-in function returning True if any element in an iterable evaluates to true. In `CodeVisitor`, it checks whether a decorator is ast.Name with \"staticmethod\" ID during class method traversal, marking them as static methods within 'class_defs'."
    },
    {
        "instruction": "Variables in `CodeVisitor.extract_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n    node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n    if node_inputs:\n        node_variables = list(set(node_inputs + node_variables))\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n            class_attributes += attributes\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details\n```",
        "output": "'node_walk', 'node', 'node_inputs', 'class_attributes', 'self', 'attributes', 'node_variables', 'node_type', 'call_data', 'details'\n\nPurpose and Significance:\n1. node_walk: In the context of CodeVisitor's extract_details method, `node_walk` denotes an iterable list obtained through `ast.walk(node)`. It contains all nodes traversed during analysis within a specific `node`, enabling extraction of relevant details for each subcomponent in the Abstract Syntax Tree (AST). This variable assists in collecting necessary information about various aspects such as function inputs, returns, decorators, annotations, properties, etc., required to build comprehensive node descriptions.\n\n2. node: This parameter represents the current node being analyzed during the traversal within CodeVisitor's extract_details function. It acts as a central reference point throughout method execution to collect and process information from various AST nodes in the Python code under examination.\n\n3. node_inputs: A temporary list created within `extract_details` to store input arguments for functions or methods encountered during traversal. This variable holds parameter lists associated with function definitions (FunctionDef, MethodDef) found during AST exploration and helps build the details dictionary accordingly.\n\n4. class_attributes: Specific to `CodeVisitor`, this variable serves within class definition contexts (ClassDef nodes). It accumulates attribute names identified while traversing nested Assign nodes where targets are Ast.Attribute instances referring to 'self'. This list is later incorporated into class details stored in the `classes` dictionary.\n\n5. self: Refers to the instance of CodeVisitor itself within its methods including extract_details(). It allows accessing attributes like functions, classes, file_info, etc., essential for building node descriptions or updating file summary during analysis. 'self' helps maintain class consistency across methods in capturing different code elements like function and class definitions, variables, calls, decorators, dependencies, etc.\n\n6. attributes: Similar to `class_attributes`, but applicable when traversing the entire body of a ClassDef node instead of focusing on self assignments only. It collects attribute names found during AST exploration within classes for subsequent storage in `classes` dictionary entries.\n\n7. node_type: This string variable denotes the type of node being processed ('function', 'method', 'class') in CodeVisitor's extract_details function. It aids in identifying node-specific attributes and creating structured descriptions for functions, methods, or classes based on its value during dictionary formation.\n\n8. call_data: Initially empty within `extract_details` yet populates upon recursive exploration through AST's `get_all_calls`. Its keys reflect identified function names within a scope - collected method calls dictionary built recursively starting at node. Values comprise listings of their corresponding argument inputs as the function invocation information. These entries ultimately land in extracted 'details' representing function call patterns during code analysis.\n\n9. details: This comprehensive `dict` is constructed within extract_details() by combining various node attributes and values gathered from traversal. It consolidates all relevant data related to a specific node (function, method or class) into a single structure before adding it to either 'functions' or 'classes' dictionary depending on the `node_type`."
    },
    {
        "instruction": "Returns from `CodeVisitor.extract_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]]:\n    \"\"\"\n        Extract details about a node.\n        Args:\n            node: ast.AST: The node to extract details from.\n            node_type: str: The type of node.\n        Returns:\n            Dict[str, Union[str, List[str]]]: The details extracted from the node.\n        \"\"\"\n    node_walk = list(ast.walk(node))\n    call_data = get_all_calls(node)\n    node_inputs = [arg.arg for arg in node.args.args] if node_type in ['function', 'method'] else None\n    node_variables = list({ast.unparse(target) for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Name)})\n    if node_inputs:\n        node_variables = list(set(node_inputs + node_variables))\n    details = {f'{node_type}_name': node.name, f'{node_type}_code': ast.unparse(node), f'{node_type}_docstring': next((n.value.s for n in node_walk if isinstance(n, ast.Expr) and isinstance(n.value, ast.Str)), None), f'{node_type}_inputs': node_inputs, f'{node_type}_defaults': [ast.unparse(d) for d in node.args.defaults] if node_type in ['function', 'method'] else None, f'{node_type}_returns': [ast.unparse(subnode.value) if subnode.value is not None else 'None' for subnode in node_walk if isinstance(subnode, ast.Return)], f'{node_type}_calls': list(call_data.keys()), f'{node_type}_call_inputs': call_data, f'{node_type}_variables': node_variables, f'{node_type}_decorators': list({ast.unparse(decorator) for decorator in node.decorator_list} if node.decorator_list else set()), f'{node_type}_annotations': list({ast.unparse(subnode.annotation) for subnode in node_walk if isinstance(subnode, ast.AnnAssign) and subnode.annotation is not None}), f'{node_type}_properties': list({ast.unparse(subnode) for subnode in node_walk if isinstance(subnode, ast.Attribute) and isinstance(subnode.ctx, ast.Store)})}\n    if node_type in ['class', 'method']:\n        if node_type == 'method' and self.current_class:\n            attributes = [target.attr for subnode in node_walk if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name) and (target.value.id == 'self')]\n            class_attributes = self.classes[self.current_class].setdefault('class_attributes', [])\n            class_attributes += attributes\n        if node_type == 'class':\n            details.update({'class_attributes': [target.attr for subnode in node.body if isinstance(subnode, ast.Assign) for target in subnode.targets if isinstance(target, ast.Attribute)], 'class_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef)], 'class_inheritance': [ast.unparse(base) for base in node.bases] if node.bases else [], 'class_static_methods': [subnode.name for subnode in node.body if isinstance(subnode, ast.FunctionDef) and any((isinstance(decorator, ast.Name) and decorator.id == 'staticmethod' for decorator in subnode.decorator_list))]})\n    return details\n```",
        "output": "'details'\n\nPurpose and Significance:\nIn the given Python script 'get_python_file_details.py', the `CodeVisitor.extract_details()` method plays a crucial role within the `CodeVisitor` class for extracting specific details about various nodes encountered during Abstract Syntax Tree (AST) traversal. This function returns a dictionary containing valuable information related to functions or classes based on its input argument `node_type`. It contributes significantly towards populating the `file_info` attribute in `CodeVisitor`, which holds comprehensive data regarding the analyzed Python file. The method generates distinct dictionaries for functions and classes, each comprising several key-value pairs that provide crucial insights into their respective elements within the codebase.\n\n1. Purpose of Returns from `CodeVisitor.extract_details` with `node_type='function' or 'method':\nWhen `node_type` is set to 'function' or 'method', `CodeVisitor.extract_details()` extracts details about Python functions within the code. It collects information such as function name, code representation (without docstrings), docstring content if present, input arguments list ('function_inputs'), calls dictionary ('function_calls'), call inputs ('function_call_inputs'), return values ('function_returns'), and more attributes depending on the node context. This process contributes to the `functions` dictionary within `CodeVisitor`, storing detailed information about functions in the Python file.\n\n2. Purpose of Returns from `CodeVisitor.extract_details` with `node_type='class' or 'method' starting with 'class_':\nWhen `node_type` refers to a `'class'`, specifically instances initialized with '_method', e.g., `\"class_method\"` like structure (which stand for Class method calls in inheritance), `CodeVisitor.extract_details()` gathers class-specific details such as class name, method definitions dictionary ('class_methods'), dependencies list ('file_dependencies'), etc. These extracted values contribute to the `classes` dictionary within `CodeVisitor`, encompassing all the analyzed classes along with their associated data in the Python file. This method extracts details of class attributes too if they exist inside methods within that particular class scope."
    },
    {
        "instruction": "Inputs to `CodeVisitor.analyze` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n    self.visit(node)\n    node_walk = list(ast.walk(node))\n    file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n    self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the context of the CodeVisitor class within get_python_file_details.py, the `analyze` method plays a crucial role in extracting comprehensive information about a Python source code file and structuring it into a well-organized format for further analysis. It primarily utilizes two inputs - 'self' and 'node'.\n\n1. Self ('self'):\nThis keyword argument refers to the instance of the CodeVisitor object itself during method invocation. It provides access to all attributes and methods defined within the class, enabling it to leverage previously stored data such as parsed code ('code'), extracted function/class details (functions and classes dictionaries), dependencies, constants, etc. This instance-level connection facilitates effective usage of inherited ast.NodeVisitor behavior alongside custom functionality implemented in CodeVisitor like visit_FunctionDef(), visit_ClassDef(), generic_visit(), extract_details(), etc. Self essentially links `analyze` with the ongoing processing of traversing and storing relevant information related to a given Python code file.\n\n2. Node ('node'):\nThe 'node' parameter denotes an Abstract Syntax Tree (AST) representation that CodeVisitor needs to analyze as part of its traversal process during method execution. It serves as a starting point from where the method dives into the tree structure, extracting details about functions and classes while maintaining contextual awareness through recursive calls. This node acts as a stepping stone for navigating through the AST hierarchy, enabling `analyze` to gather functional elements (either function definition ast nodes like ast.FunctionDef or ast.ClassDef), gather variables' occurrence with Visit Assign functions if it pertains to an Import node ('import', 'ast.Import'), and more. By traversing this node, CodeVisitor populates the file_info dictionary with essential details about the Python code file."
    },
    {
        "instruction": "Docstring of `CodeVisitor.analyze` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n    self.visit(node)\n    node_walk = list(ast.walk(node))\n    file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n    self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze."
    },
    {
        "instruction": "Calls made in `CodeVisitor.analyze` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n    self.visit(node)\n    node_walk = list(ast.walk(node))\n    file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n    self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "'self.visit', 'list', 'ast.walk', 'isinstance', 'self.functions.items', 'len', 'class_details.items', 'method_name.startswith', 'self.classes.items', 'self.functions.keys', 'self.classes.keys', 'remove_docstring', 'ast.unparse'\n\nPurpose and Significance:\nIn the `CodeVisitor.analyze` method within get_python_file_details.py, several key calls are executed to gather comprehensive details about a Python source code file and populate its internal 'file_info' dictionary. Their roles and operations are described as follows:\n\n1. `self.visit(node)`: This call triggers traversal of the Abstract Syntax Tree (AST), allowing CodeVisitor to capture various code elements during analysis. It invokes visitor methods for different node types such as FunctionDef, ClassDef, Assign, Import, etc., enabling extraction of necessary information.\n\n2. `list(ast.walk(node))`: Walks through the given AST node recursively and collects details on functions, classes, dependencies, constants, etc. Ast.walk helps identify multiple node levels while analyzing code elements for extracting attributes and connections within a program's structure.\n\n3. `isinstance(object[, classinfo=...)]`: Verifies if an object belongs to specific Python data types or inheritance hierarchy during analysis in the CodeVisitor class. This is particularly useful when identifying nodes like FunctionDef, ClassDef, Call, Assign, Import, etc., and performing relevant actions accordingly.\n\n4. `len(iterable)`: Returns the number of items present in an iterable object such as lists or tuples. In this context, it may be used to determine lengths of extracted function or class details for further processing.\n\n5. `class_details.items()` and `self.functions.items(), self.classes.items()`: These calls retrieve all key-value pairs from dictionaries 'class_details' and 'self.functions', 'self.classes'. They help iterate over the data collected within these variables, preparing for subsequent transformations like forming class definitions dictionary ('dicts') or list structures representing file information for detailed analysis.\n\n6. `method_name.startswith('prefix')`: Checks if a string variable 'method_name' starts with a specified prefix ('class_method_'). This is crucial in differentiating between methods within classes and functions while building the final class details dictionary.\n\n7. `self.functions.keys()`, `self.classes.keys()`: Returns all keys present in dictionaries 'self.functions' and 'self.classes'. These calls assist in constructing lists containing function names ('file_functions') and class names ('file_classes'), respectively, for easier representation in the final file details dictionary.\n\n8. `remove_docstring(ast.unparse(node))`: Removes docstrings from Python code while preserving syntax integrity during AST traversal. It ensures a sanitized version of code is stored as 'file_info[\"file_code_simplified\"] for better understanding without documentation strings.\n\n9. `ast.unparse(tree)`: Converts the Abstract Syntax Tree back into Python code string format, maintaining its structure and syntax. It helps in creating sanitized version ('remove_docstring(...)') before using get_code_graph(), thereby serving the file dependencies exploration needs better with graph constructs (planted uml diagrams).'''"
    },
    {
        "instruction": "Variables in `CodeVisitor.analyze` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef analyze(self, node: ast.AST) -> None:\n    \"\"\"\n        Traverse the AST, list all nodes, and populate 'file_info'\n        Args:\n            node: ast.AST: The node to analyze.\n        \"\"\"\n    self.visit(node)\n    node_walk = list(ast.walk(node))\n    file_dependencies = {alias.name for subnode in node_walk if isinstance(subnode, ast.Import) for alias in subnode.names} | {subnode.module for subnode in node_walk if isinstance(subnode, ast.ImportFrom)}\n    function_defs = [{func_name: {'inputs': details['function_inputs'], 'calls': details['function_calls'], 'call_inputs': details['function_call_inputs'], 'returns': details['function_returns']}} for func_name, details in self.functions.items()]\n    class_defs = [{class_name: {'method_defs': {method_name[len('class_method_'):]: {'inputs': details['method_inputs'], 'calls': details['method_calls'], 'call_inputs': details['method_call_inputs'], 'returns': details['method_returns']} for method_name, details in class_details.items() if method_name.startswith('class_method_')}}} for class_name, class_details in self.classes.items()]\n    self.file_info = {'file_code': self.code, 'file_ast': node, 'file_dependencies': list(file_dependencies), 'file_functions': list(self.functions.keys()), 'file_classes': list(self.classes.keys()), 'file_constants': self.constants, 'file_summary': {'dependencies': list(file_dependencies), 'function_defs': function_defs, 'class_defs': class_defs}, 'file_code_simplified': remove_docstring(ast.unparse(node), self.tree)}\n```",
        "output": "'function_defs', 'file_dependencies', 'node_walk', 'node', 'class_defs', 'self'\n\nPurpose and Significance:\nIn `CodeVisitor`'s `analyze` method within get_python_file_details.py, several key variables contribute to collecting crucial details about the analyzed Python file and organizing them systematically. Their roles are outlined as follows:\n\n1. function_defs: This variable holds a list comprehension result containing dictionary representations of extracted function definitions from the parsed code. Each dictionary in `function_defs` represents an individual function within the Python source file, including its inputs, calls, and returns. It assists in structuring data related to functions for easy access later on.\n\n   Purpose: Organizing Function Details\n   Significance: Facilitates efficient retrieval of function information from the processed code.\n\n2. file_dependencies: This variable accumulates a set comprising dependencies found during AST traversal. It identifies imported modules or classes used in the Python script, helping to understand external dependencies required for proper execution.\n\n   Purpose: Capturing File Dependencies\n   Significance: Enables insight into the dependencies needed by the analyzed Python file.\n\n3. node_walk: An intermediate variable within `analyze` method which temporarily stores nodes from `ast.walk(node)`. It aids in traversing the Abstract Syntax Tree (AST) efficiently while extracting relevant information about various code elements like imports, functions, classes, etc., without losing track of parentage relations.\n\n   Purpose: Aiding Efficient Traversal and Data Collection\n   Significance: Enables organized access to nodes encountered during the traversal process.\n\n4. node: It refers to an arbitrary Abstract Syntax Tree (AST) node within `CodeVisitor`. In `analyze`, it represents each node being processed as the method loops through different elements in the tree hierarchy.\n\n   Purpose: Representing Current Node During Traversal\n   Significance: Helps identify specific nodes during AST traversal for extraction of code details.\n\n5. class_defs: Similar to `function_defs`, this list includes dictionaries of detailed extracted data relating specifically to defined classes found within the processed code, highlighting attributes (if applicable). Class details in 'class_defs' serve an organizational function much like `function_defs` but for class-related aspects.\n\n   Purpose: Organizing Class Details\n   Significance: Simplifies access to information regarding classes and their attributes within the Python file.\n\n6. self: This keyword refers to the current instance of `CodeVisitor`. It maintains context throughout method calls within `analyze` while accessing relevant attributes like 'functions', 'classes', or 'file_info'.\n\n   Purpose: Maintaining Instance Context\n   Significance: Enables smooth data retrieval from class attributes during the analysis process."
    },
    {
        "instruction": "Inputs to `get_python_file_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_summary = file_details['file_info']['file_summary']\n    file_ast = file_details['file_info']['file_ast']\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(file_summary, file_ast)\n    file_details['file_info']['entire_code_graph'] = entire_code_graph\n    file_details['file_info']['control_flow_structure'] = control_flow_structure\n    file_details['file_info']['plant_uml'] = plant_uml\n    file_details['file_info']['file_summary'] = json.dumps(file_summary).replace('\"', '')\n    del file_details['file_info']['file_ast']\n    return file_details\n```",
        "output": "'file_path'\n\nPurpose and Significance:\nIn the given Python script 'get_python_file_details.py', the function `get_python_file_details(file_path: str) plays a pivotal role by retrieving intricate information from a specified Python file path ('file_path'). Its primary purpose is to analyze the provided source code file and generate an organized dictionary containing comprehensive details about it for easy accessibility.\n\nThe input argument 'file_path' serves as the crucial identifier pointing towards the targeted Python file location on the system. This path enables `get_python_file_details()` to read the contents of the mentioned file, parse its Abstract Syntax Tree (AST), and instantiate necessary classes to extract various elements related to functions, classes, dependencies, constants, etc., within it. These details are later consolidated into a structured dictionary format that represents extracted file information in a convenient manner. Thus, 'file_path' holds utmost significance as it directs the entire process towards the desired Python source code for analysis and documentation extraction."
    },
    {
        "instruction": "Docstring of `get_python_file_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_summary = file_details['file_info']['file_summary']\n    file_ast = file_details['file_info']['file_ast']\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(file_summary, file_ast)\n    file_details['file_info']['entire_code_graph'] = entire_code_graph\n    file_details['file_info']['control_flow_structure'] = control_flow_structure\n    file_details['file_info']['plant_uml'] = plant_uml\n    file_details['file_info']['file_summary'] = json.dumps(file_summary).replace('\"', '')\n    del file_details['file_info']['file_ast']\n    return file_details\n```",
        "output": "Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file."
    },
    {
        "instruction": "Calls made in `get_python_file_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_summary = file_details['file_info']['file_summary']\n    file_ast = file_details['file_info']['file_ast']\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(file_summary, file_ast)\n    file_details['file_info']['entire_code_graph'] = entire_code_graph\n    file_details['file_info']['control_flow_structure'] = control_flow_structure\n    file_details['file_info']['plant_uml'] = plant_uml\n    file_details['file_info']['file_summary'] = json.dumps(file_summary).replace('\"', '')\n    del file_details['file_info']['file_ast']\n    return file_details\n```",
        "output": "'open', 'f.read', 'ast.parse', 'logging.warning', 'CodeVisitor', 'visitor.analyze', 'get_code_graph', 'json.dumps(file_summary).replace', 'json.dumps'\n\nPurpose and Significance:\n1. Purpose and Significance of Calls in `get_python_file_details` related to `open` function:\n   Opening the Python file specified by `file_path` with read permissions in 'utf-8' encoding aims to extract its contents as a string for further processing. This step initiates interaction with the input data source required for code analysis and documentation extraction. Without this operation, no information could be retrieved from the given file path.\n\n2. Purpose and Significance of Calls in `get_python_file_details` related to `f.read` function:\n   Reading the contents of the opened Python file using 'f.read()' populates a string variable named 'code', which serves as input for creating an Abstract Syntax Tree (AST) representing the code structure. This step is essential to begin analyzing and understanding the Python source code internals.\n\n3. Purpose and Significance of Calls in `get_python_file_details` linked with `ast.parse` function:\n   Invoking `ast.parse(code)` creates an AST (Abstract Syntax Tree) based on provided 'code', facilitating structured navigation throughout the file content to gather details about functions, classes, dependencies, etc. This step is crucial for comprehensively understanding Python code semantics and relationships between different elements within it.\n\n4. Purpose and Significance of Calls in `get_python_file_details` related to `logging.warning` function:\n   Used as a warning mechanism in case an error occurs while handling the input file, 'logging.warning()' ensures errors are notified but does not stop further processing or cause program failure. This enables continued operation despite possible exceptions such as PermissionError, SyntaxError, and IOError.\n\n5. Purpose and Significance of Calls in `get_python_file_details` involving `CodeVisitor` instantiation:\n   Creating an instance of the `CodeVisitor` class with 'code' string and 'tree' (AST) initializes object variables to extract code details from the given Python file. This step initiates analysis using a custom visitor pattern for traversing AST nodes and gathering relevant information about functions, classes, constants, etc.\n\n6. Purpose and Significance of Calls in `get_python_file_details` associated with `visitor.analyze` method:\n   After instantiating `CodeVisitor`, invoking 'visitor.analyze(tree)' traverses the Abstract Syntax Tree, collecting details about various aspects of the Python file. This method populates internal dictionaries containing extracted data on functions ('functions', 'classes') and constructs a JSON-compatible representation ('file_summary').\n   Additionally, it prepares inputs for further operations like code graph creation by 'get_code_graph()'. Without this step, critical information about the Python file would be missed during documentation.\n\n7. Purpose and Significance of Calls in `get_python_file_details` related to `get_code_graph` function:\n   `get_code_graph(file_summary, file_ast)` constructs a directed graph representing code call relationships using NetworkX library functions. This step provides visualization of control flow structure within the Python file and enriches extracted data with connections between functions/classes. It contributes to better understanding the code's behavior and interdependencies.\n\n8. Purpose and Significance of Calls in `get_python_file_details` regarding `json.dumps(file_summary).replace` function:\n   Serializing 'file_summary' JSON data converts it into a string format with replaced double quotes ('\"') by empty strings (''). This ensures compatibility with JSON requirements while maintaining the file summary dictionary as part of returned documentation for easier access and interpretation outside Python contexts. Without this step, JSON serialization might fail due to reserved characters in Python dict keys ('\"'), causing errors when handling extracted data externally.\n\n9. Purpose and Significance of Calls in `get_python_file_details` related to `json.dumps` function:\n   Serializing the entire 'file_details' dictionary into JSON format using `json.dumps()`. This step ensures easy transferability of extracted information across different programming languages or systems, enhancing its usability and accessibility for further analysis or visualization purposes."
    },
    {
        "instruction": "Variables in `get_python_file_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_summary = file_details['file_info']['file_summary']\n    file_ast = file_details['file_info']['file_ast']\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(file_summary, file_ast)\n    file_details['file_info']['entire_code_graph'] = entire_code_graph\n    file_details['file_info']['control_flow_structure'] = control_flow_structure\n    file_details['file_info']['plant_uml'] = plant_uml\n    file_details['file_info']['file_summary'] = json.dumps(file_summary).replace('\"', '')\n    del file_details['file_info']['file_ast']\n    return file_details\n```",
        "output": "'tree', 'code', 'file_summary', 'file_details', 'file_ast', 'visitor', 'file_path'\n\nPurpose and Significance:\n1. tree: This variable holds the Abstract Syntax Tree (AST) representation of a Python source code obtained after parsing it using ast.parse(). It serves as an essential input for several functions like remove_docstring() and CodeVisitor class initialization, facilitating extraction of detailed information about functions, classes, constants, dependencies, etc., within the given file.\n\n2. code: Represents the original Python source code read from a specified file path before parsing into AST format during `get_python_file_details()` function execution. It's primarily utilized in initializing both `remove_docstring()` and `CodeVisitor` class instantiation to analyze the code structure.\n\n3. file_summary: Captures a condensed summary of extracted details about the Python file, such as dependencies, functions, classes, constants, etc., after traversing the Abstract Syntax Tree (AST). It's generated within `CodeVisitor` instance's analyze() method and later used to construct a code graph with get_code_graph(). This dictionary is serialized into JSON format for easier representation when returned in 'file_details'.\n\n4. file_details: Encompasses all extracted file details obtained through various functions within `get_python_file_details()`. It consolidates data collected from `CodeVisitor` instance methods and get_code_graph(), providing comprehensive information about the analyzed Python file as a dictionary output. This includes 'file_info', 'functions', 'classes', 'entire_code_graph', 'control_flow_structure', and 'plant_uml'.\n\n5. file_ast: Refers to the original Abstract Syntax Tree (AST) used for analysis within `get_python_file_details()`. It's stored in 'file_info' dictionary right before constructing code call graph with get_code_graph(). This tree representation is required by the latter function to generate a directed graph based on function calls and control flow structure.\n\n6. visitor: Refers specifically to an instantiated instance of `CodeVisitor` class initialized using supplied Python code string and parsed Abstract Syntax Tree. Its 'analyze()' method extracts code details while traversing AST recursively, preparing file_info for further processing like constructing a code graph.\n\n7. file_path: Denotes the path to the input Python file that `get_python_file_details()` function works on to fetch data about. This parameter enables reading Python code content for subsequent operations like opening, parsing, and AST generation through ast.parse()."
    },
    {
        "instruction": "Returns from `get_python_file_details` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_python_file_details(file_path: str) -> Dict[str, Union[Dict, str]]:\n    \"\"\"\n    Extract details from a Python file.\n    Args:\n        file_path: str: The path to the Python file.\n    Returns:\n        Dict[str, Union[Dict, str]]: The details extracted from the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            code = f.read()\n            tree = ast.parse(code)\n    except (PermissionError, SyntaxError, IOError) as e:\n        logging.warning(f'{e} error in file: {file_path}')\n        return None\n    visitor = CodeVisitor(code, tree)\n    visitor.analyze(tree)\n    file_details = {'file_info': visitor.file_info, 'functions': visitor.functions, 'classes': visitor.classes}\n    file_summary = file_details['file_info']['file_summary']\n    file_ast = file_details['file_info']['file_ast']\n    entire_code_graph, control_flow_structure, plant_uml = get_code_graph(file_summary, file_ast)\n    file_details['file_info']['entire_code_graph'] = entire_code_graph\n    file_details['file_info']['control_flow_structure'] = control_flow_structure\n    file_details['file_info']['plant_uml'] = plant_uml\n    file_details['file_info']['file_summary'] = json.dumps(file_summary).replace('\"', '')\n    del file_details['file_info']['file_ast']\n    return file_details\n```",
        "output": "'file_details', 'None'\n\nPurpose and Significance:\n**Purpose and Significance of Returns from `get_python_file_details`:**\n\nThe `get_python_file_details` function serves as a primary entry point to extract comprehensive information about a given Python source code file. It consolidates diverse details into a structured dictionary format for easy accessibility and analysis. Upon successful execution, it returns an elaborate data structure named 'file_details'. However, if any error occurs during processing (e.g., permission issues or syntax errors), `None` is returned instead.\n\n1. **'file_details':**\nThis key contains the core output of `get_python_file_details`, encompassing extracted file details as a dictionary comprising essential data regarding functions, classes, file metadata (e.g., dependencies, code content), code graph, and control flow structure in serialized format for ease of representation and handling.\n   - It consolidates findings gathered from CodeVisitor instance analysis on the Abstract Syntax Tree (AST) traversal.\n   - Includes information extracted about functions and classes as sub-dictionaries within 'file_details'.\n   - The entire code graph, control flow structure, and serialized file summary are also stored in this dictionary for further examination.\n\n2. **'None':**\nThis alternative return value indicates an error occurred during processing the Python file. It signifies that `get_python_file_details` could not generate a valid 'file_details' object due to unresolvable issues like incorrect path specifications, syntax errors, or insufficient permissions while opening/reading the input file. In such cases, users need to troubleshoot before retrieving the actual details."
    },
    {
        "instruction": "Inputs to `get_all_calls` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(body_item.targets[0], ast.Name):\n                get_all_calls(body_item.value, calls)\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n    return calls_dict\n```",
        "output": "'node', 'calls'\n\nPurpose and Significance:\nIn the context given code, 'get_all_calls' function holds a significant role during data collection for comprehensively determining every single instance of function calls occurring throughout a provided Abstract Syntax Tree (AST) represented by its primary argument 'node'. This function majorly focuses on traversing the AST structure to recognize and accumulate information about all function invocations within the Python codebase. The secondary input parameter, 'calls', is an optional dictionary used as an accumulator to gather and store discovered function call data throughout this exploration process. It's utilized in a recursive manner where each found function call is appended to the initializer list if absent or further extends existing collected call data while processing different nodes of AST.\n\nThe primary input 'node' serves as the root node from which `get_all_calls` initiates its traversal through the tree, examining various sections within Python code. This root node may encompass function calls embedded in list comprehensions or lambda functions, making its detection vital for an accurate call mapping process. By navigating this root node and subtree below it, 'get_all_calls' successfully captures each encountered function call and adds their arguments to the 'calls' dictionary while creating a well-organized output structure ready for further analysis or processing.\n\nThe second input argument, 'calls', functions as an accumulator if supplied as None; otherwise, it already holds data retrieved from previous traversals. This parameter allows `get_all_calls` to continue its operation seamlessly by appending new function call details without losing prior findings. In essence, 'calls' acts as a memory aid for maintaining the progress of previously identified function calls while examining additional parts of the AST tree. Once traversal is completed, the accumulated dictionary of function calls gets returned by `get_all_calls`, facilitating further code analysis tasks."
    },
    {
        "instruction": "Docstring of `get_all_calls` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(body_item.targets[0], ast.Name):\n                get_all_calls(body_item.value, calls)\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n    return calls_dict\n```",
        "output": "Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments."
    },
    {
        "instruction": "Calls made in `get_all_calls` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(body_item.targets[0], ast.Name):\n                get_all_calls(body_item.value, calls)\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n    return calls_dict\n```",
        "output": "'isinstance', 'calls.append', 'ast.unparse', 'get_all_calls', 'ast.iter_child_nodes', 'calls_dict[func].extend'\n\nPurpose and Significance:\nIn the given Python function `get_all_calls`, several important operations take place to retrieve a dictionary of all function calls found within a specified node's subtree in Abstract Syntax Tree (AST). Understanding the purposes of highlighted keywords clarifies how information aggregates thoroughly from input data and navigates efficiently within Ast modules:\n\n1. instanceof(: Operation used throughout get_all_calls method helps type verification inside Python `if` statements for decision making. It ensures appropriate handling of nodes during recursive traversal by identifying their types such as `ast.Call`, `ast.ClassDef`, etc., allowing proper execution flow.\n\n2. calls.append(): This append() call is used to store discovered function calls with respective arguments while iterating through AST nodes. With each `ast.Call` encountered, a tuple consisting of the function name and argument list is added to accumulator 'calls', thereby creating a dictionary structure representing relationships between functions and their parameters within a node's subtree.\n\n3. ast.unparse(): This method plays a vital role in formatting the nodes into string representation without altering its semantics for easy understanding outside of AST context. In `remove_docstring` function, it removes docstrings from Python code while preserving syntax integrity by removing top-level module docstrings and those within functions, classes, and async functions during tree traversal. Here in `get_all_calls`, ast.unparse() is not directly involved but serves as a helper for formatting nodes when building the dictionary of function calls.\n\n4. get_all_calls(): This function itself primarily finds function invocations throughout a given AST subtree (referred by node parameter), yet we've included it among those listed to pinpoint its existence in the methodology for maintaining consistency across explanation. Its major duty lies outside `get_all_calls`, but is relevant to the overall function behavior.\n\n5. ast.iter_child_nodes(): An essential iterative mechanism for traversing children nodes under the given parent node, ensuring a systematic inspection of all subtree elements in `CodeVisitor` class methods like `visit_Assign`. It helps explore nested structures within AST efficiently and extract relevant data points such as constants or attributes.\n\n6. calls_dict[func].extend(): This list append operation is utilized to accumulate function names found inside classes under the 'class_method_' prefix in `CodeVisitor` class's `visit_ClassDef` method when traversing class definitions. It adds discovered attribute names to an existing dictionary key ('class_methods') within 'classes', thus enriching class details with method information."
    },
    {
        "instruction": "Variables in `get_all_calls` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(body_item.targets[0], ast.Name):\n                get_all_calls(body_item.value, calls)\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n    return calls_dict\n```",
        "output": "'calls', 'calls_dict', 'node'\n\nPurpose and Significance:\nIn `get_all_calls` function within the given Python script for analyzing Python source code, the variables '_calls', '_calls_dict', and '_node' play crucial roles in identifying and aggregating all function calls within a subtree rooted at a specified node. Their purpose and significance are explained as follows:\n\n1. '_calls': This variable serves as an optional argument holding a dictionary accumulator for recorded function calls discovered during recursive traversal through the Abstract Syntax Tree (AST). Initially set to None but gets updated with call details as the function progresses. It helps maintain a centralized storage space for all encountered function invocations within the subtree.\n\n2. '_calls_dict': Once the traversal is completed, this variable stores a dictionary mapping function calls as strings (from '_node') to lists of their arguments after constructing call relationships across nodes in the AST structure. This finalized data structure helps represent functions and their corresponding input parameters efficiently for further analysis or usage outside the `get_all_calls` function scope.\n\n3. '_node': It represents the root node from where recursive search starts while finding function calls within the Abstract Syntax Tree (AST). This parameter is passed to `get_all_calls` as an input argument and gets updated during traversal with child nodes encountered throughout the process. Its primary role is guiding the search path for locating function invocations in Python code."
    },
    {
        "instruction": "Returns from `get_all_calls` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef get_all_calls(node: ast.AST, calls=None) -> Dict[str, List[str]]:\n    \"\"\"\n    Recursively find all function calls in the subtree rooted at `node`,\n    including those in class attributes, list comprehensions, and lambda functions.\n    Args:\n        node (ast.AST): The root node to start the search from.\n        calls (List[Tuple[str, List[str]]], optional): Accumulator for function calls found.\n    Returns:\n        Dict[str, List[str]]: dictionary mapping function calls (as strings) to lists of their arguments.\n    \"\"\"\n    if calls is None:\n        calls = []\n    if isinstance(node, ast.Call):\n        calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]))\n    elif isinstance(node, ast.ClassDef):\n        for body_item in node.body:\n            if isinstance(body_item, ast.Assign) and isinstance(body_item.targets[0], ast.Name):\n                get_all_calls(body_item.value, calls)\n    for child in ast.iter_child_nodes(node):\n        get_all_calls(child, calls)\n    calls_dict = {}\n    for func, args in calls:\n        if func not in calls_dict:\n            calls_dict[func] = []\n        calls_dict[func].extend(args)\n    return calls_dict\n```",
        "output": "'calls_dict'\n\nPurpose and Significance:\nIn the given Python codebase, the function 'get_all_calls' primarily focuses on identifying all occurrences of function calls within a specified node subtree of Abstract Syntax Tree (AST). This collected data contributes significantly towards comprehensively mapping the software details during software documentation analysis. 'calls_dict', produced as one of the main outcomes of 'get_all_calls', plays an integral part in conveying such insights to external sections needing the retrieved information about invoked functions. This dictionary takes shape with strings representing targeted functions acting as keys while associating lists comprising corresponding argument listings as their values - depicting calls hierarchically embedded throughout various levels within AST.\n\nThe 'calls_dict' construction involves two primary actions:\n1. Initializing it as an empty list if none is provided ('calls = []').\n2. Adding call details upon encountering Ast.Call nodes ('calls.append()'). This process captures function invocations within the subtree rooted at 'node'.\n3. Recursively traversing child nodes to cover additional scenarios like class attributes, list comprehensions, and lambda functions ('for child in ast.iter_child_nodes(node)').\n\nThe Returns from `get_all_calls` function can be summarized as follows:\n- A dictionary mapping function calls (as strings) to lists of their respective arguments. Each string entry serves as the calling function's identity whereas appended lists exemplify related inputs delivered while making such function calls throughout an ast subtree rooting from `node`. By generating and returning 'calls_dict', this function offers a concise representation of functional interdependencies within a Python codebase, thus aiding in software understanding and analysis."
    },
    {
        "instruction": "Inputs to `remove_docstring` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if tree.body and isinstance(tree.body[0], ast.Expr) and isinstance(tree.body[0].value, ast.Str):\n        tree.body.pop(0)\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)) and node.body:\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(first_body_node.value, ast.Str):\n                node.body.pop(0)\n    return ast.unparse(tree)\n```",
        "output": "'code', 'tree'\n\nPurpose and Significance:\nIn `remove_docstring`, two primary inputs are passed - 'code' and 'tree'. These parameters hold significant roles in stripping docstrings from a given Python source code while preserving its syntax integrity. The 'code' input represents the original Python script that requires cleanup of its documentation strings, whereas 'tree' is an Abstract Syntax Tree (AST) representation of this code. This AST allows for easier manipulation and traversal through Python elements such as modules, functions, classes, or async functions during analysis. The combination of these inputs helps `remove_docstring` to locate and eliminate docstrings within the code while maintaining its structural consistency. Specifically, 'code' acts as a raw data source to be processed while 'tree' provides an organized view for better understanding of the program's internal structure enabling effective documentation removal by leveraging functions like `ast.walk()`, `node.body.pop()` and `ast.unparse()`. By utilizing these inputs together, `remove_docstring` delivers a sanitized version of Python code devoid of docstrings as output."
    },
    {
        "instruction": "Docstring of `remove_docstring` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if tree.body and isinstance(tree.body[0], ast.Expr) and isinstance(tree.body[0].value, ast.Str):\n        tree.body.pop(0)\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)) and node.body:\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(first_body_node.value, ast.Str):\n                node.body.pop(0)\n    return ast.unparse(tree)\n```",
        "output": "Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed."
    },
    {
        "instruction": "Calls made in `remove_docstring` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if tree.body and isinstance(tree.body[0], ast.Expr) and isinstance(tree.body[0].value, ast.Str):\n        tree.body.pop(0)\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)) and node.body:\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(first_body_node.value, ast.Str):\n                node.body.pop(0)\n    return ast.unparse(tree)\n```",
        "output": "'isinstance', 'tree.body.pop', 'ast.walk', 'node.body.pop', 'ast.unparse'\n\nPurpose and Significance:\nIn `remove_docstring`, several crucial function calls contribute to stripping docstrings from Python source code while preserving its syntax integrity. These calls are explained below with their respective roles:\n\n1. `isinstance()`: This built-in Python function checks the type of objects dynamically at runtime. In `remove_docstring`, it determines whether node.body holds an initial Expression statement carrying docstrings within FunctionDef, ClassDef or AsyncFunctionDef instances when exploring Abstract Syntax Tree (AST). It helps isolate the topmost docstring at the module level along with internal ones associated with defined functions or class blocks in order to exclude them subsequently using specified code modifications.\n\n2. `tree.body.pop()` and `node.body.pop(0)`: When handling top-level module docstrings, `tree.body.pop()` deletes the initial expression statement containing it from the AST tree object ('tree'). For function or class docstrings within FunctionDef/ClassDef nodes, `node.body.pop(0)` clears these annotations present in the very first slot of body attribute at every traversed node's arglist while looping recursively across tree structures generated through Astwalk(). Such operation allows successful docstring elimination in respective nodes without altering their core functionality.\n\n3. `ast.walk()`: This function from Python's AST module performs depth-first traversal of an Abstract Syntax Tree (AST) node structure. In `remove_docstring`, it walks through the tree to identify docstrings within FunctionDef, ClassDef, and AsyncFunctionDef nodes. It helps locate docstrings across multiple levels in a systematic manner for efficient removal during code sanitization.\n\n4. `ast.unparse()`: The function unmarshals AST objects into corresponding source Python code snippets after the relevant clean-ups made through docstring removals at distinct stages within the program. For `remove_docstring`, it returns the sanitized code string without any comments or top-level module docstrings by converting Ast nodes back to human readable format. This enables users to analyze modified Python source code after removing unwanted annotations."
    },
    {
        "instruction": "Variables in `remove_docstring` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if tree.body and isinstance(tree.body[0], ast.Expr) and isinstance(tree.body[0].value, ast.Str):\n        tree.body.pop(0)\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)) and node.body:\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(first_body_node.value, ast.Str):\n                node.body.pop(0)\n    return ast.unparse(tree)\n```",
        "output": "'tree', 'code', 'first_body_node'\n\nPurpose and Significance:\nIn `remove_docstring`, three primary variables play crucial roles during the process of stripping docstrings from Python source code:\n\n1. 'tree': This variable represents an Abstract Syntax Tree (AST) generated by parsing the input Python code string using `ast.parse()`. It serves as a structured representation of the program's syntactic components needed to navigate through different elements efficiently. In the function, we operate on this AST tree to locate and eliminate docstrings across multiple layers - at the module level as well as within functions, classes, and async functions.\n\n2. 'code': This variable stores the original Python code string provided as input to `remove_docstring`. It is used alongside 'tree' for comparison purposes when identifying docstrings and removing them from corresponding parts of the parsed tree according to the source's semantic meaning, hence making connection between syntactical abstract structures to raw data feasible.\n\n3. 'first_body_node': Internally inside `remove_docstring`, we initialize 'first_body_node' during specific instances of a `ClassDef` node visitation wherein a function or method carries docstrings that have identical syntactical formation with Module expressions starting execution flow within `if isinstance(node.body)`. Its primary usage is to grab the first expression following docstrings (which should be function/method definition in this case) for further manipulation and eventual removal via `ast.unparse()`. Although its significance occurs locally in one segment of code removal process, 'first_body_node' supports eliminating crucial program annotations (docstrings).''"
    },
    {
        "instruction": "Returns from `remove_docstring` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef remove_docstring(code: str, tree: ast.AST) -> str:\n    \"\"\"\n    Remove docstrings from the provided Python code.\n    This includes top-level module docstrings and docstrings in\n    functions, classes, and async functions.\n    Args:\n        code (str): The source code from which to remove docstrings.\n    Returns:\n        str: The source code with docstrings removed.\n    \"\"\"\n    if tree.body and isinstance(tree.body[0], ast.Expr) and isinstance(tree.body[0].value, ast.Str):\n        tree.body.pop(0)\n    for node in ast.walk(tree):\n        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)) and node.body:\n            first_body_node = node.body[0]\n            if isinstance(first_body_node, ast.Expr) and isinstance(first_body_node.value, ast.Str):\n                node.body.pop(0)\n    return ast.unparse(tree)\n```",
        "output": "'ast.unparse(tree)'\n\nPurpose and Significance:\n**Purpose and Significance of Returns from `remove_docstring(``ast.unparse(tree``) in Python's 'get_python_file_details' Solution**\n\nThe method `remove_docstring`, in the context of 'get_python_file_details', primarily aims to eliminate docstrings from a given Python code string while preserving its syntax integrity. It operates on two outputs: original input code represented as an Abstract Syntax Tree ('tree') obtained through parsing with `ast.parse()`. The crucial return value is `ast.unparse(tree)`, which represents the sanitized Python source code devoid of top-level module docstrings and docstrings within functions, classes, and async functions present in the AST tree 'tree'.\n\n1. `ast.unparse(tree)`: This function restores the syntactically correct Python code after removing docstrings identified during traversal. It ensures that the cleaned code remains valid Python syntax while maintaining the structure of the original source file. The sanitized string can be further processed or analyzed by other functions within 'get_python_file_details'."
    },
    {
        "instruction": "Inputs to `CodeVisitor.visit_Assign` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_Assign(self, node: ast.Assign):\n    \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n    if isinstance(node.parent, ast.Module):\n        for target in node.targets:\n            if isinstance(target, ast.Name):\n                value = node.value\n                if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                    value_repr = f\"'{value.value}'\"\n                else:\n                    value_repr = ast.unparse(value)\n                constant_assignment = f'{target.id}={value_repr}'\n                self.constants.append(constant_assignment)\n    self.generic_visit(node)\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the context of 'CodeVisitor' class within the get_python_file_details.py module, the `visit_Assign` function serves a particular purpose related to extracting information relevant to Python source code constants found at the top level (module scope). The given inputs, namely ['self' and 'node'], play significant roles in fulfilling this task as follows:\n\n1. 'self': Refers to an instance of CodeVisitor class holding key details including Python code snippet, file analysis outcomes (AST), variable names assigned during constant assignment exploration etc., ensuring necessary information can be extracted easily for relevant attributes inside this instance context. During invocation `CodeVisitor.visit_Assign(node: ast.Assign)`, 'self' facilitates access to critical class variables like 'constants', used to accumulate top-level module constants as string literals.\n\n2. 'node': Denotes an AST node assigned specifically of type ast.Assign representing constant assignments found during Python code traversal via the AstParser in abstract syntax tree analysis. As `CodeVisitor` recursively iterates over different nodes within the code, this input allows `visit_Assign` to identify nodes where constants are being defined and processed accordingly. It helps track the assignment's structure and details for subsequent addition into 'self.constants'.\n\nThus, both inputs ('self' and 'node') collaborate in `CodeVisitor.visit_Assign` function to detect constant assignments within the top module level of a Python file and append them to the list of constants maintained by an object of class CodeVisitor throughout AST traversal, offering comprehension regarding these integral values. Such identifiers allow constructive usage in managing pertinent metadata derived during parsing progress effectively for end application users and analysis purposes."
    },
    {
        "instruction": "Docstring of `CodeVisitor.visit_Assign` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_Assign(self, node: ast.Assign):\n    \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n    if isinstance(node.parent, ast.Module):\n        for target in node.targets:\n            if isinstance(target, ast.Name):\n                value = node.value\n                if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                    value_repr = f\"'{value.value}'\"\n                else:\n                    value_repr = ast.unparse(value)\n                constant_assignment = f'{target.id}={value_repr}'\n                self.constants.append(constant_assignment)\n    self.generic_visit(node)\n```",
        "output": "Get self.constants\n        Args:\n            node: ast.Assign: The node to visit."
    },
    {
        "instruction": "Calls made in `CodeVisitor.visit_Assign` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_Assign(self, node: ast.Assign):\n    \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n    if isinstance(node.parent, ast.Module):\n        for target in node.targets:\n            if isinstance(target, ast.Name):\n                value = node.value\n                if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                    value_repr = f\"'{value.value}'\"\n                else:\n                    value_repr = ast.unparse(value)\n                constant_assignment = f'{target.id}={value_repr}'\n                self.constants.append(constant_assignment)\n    self.generic_visit(node)\n```",
        "output": "'isinstance', 'ast.unparse', 'self.constants.append', 'self.generic_visit'\n\nPurpose and Significance:\n**Purpose and Significance of Selected Method Calls in `CodeVisitor.visit_Assign`**\n\n1. `isinstance(subnode, ast.Assign)`:\n   In the `CodeVisitor.visit_Assign` function within the `CodeVisitor` class, this instance method check is utilized to identify if a subnode encountered during traversal of Abstract Syntax Tree (AST) corresponds to an Assign node. This verification helps determine whether the current node holds constant assignments in Python source code at the module level scope.\n\n2. `ast.unparse(value)`:\n   When dealing with constant values that are instances of `ast.Constant`, `ast.unparse()` is employed to convert them into a string representation suitable for storage as part of the `self.constants` list within `CodeVisitor`. This ensures preservation of literal values while extracting code details.\n\n3. `self.constants.append(constant_assignment)`:\n   In case an assign node signifies constant assignments, the current string construction named 'constant_assignment' gets appended into `self.constants`. It helps compile a list containing all constants found during AST traversal for further analysis of Python source code.\n\n4. `self.generic_visit(node)`:\n   This call triggers recursive traversal through the remaining subnodes in `CodeVisitor`, allowing it to continue exploring the Abstract Syntax Tree until reaching the end of the node hierarchy. It ensures comprehensive extraction of all relevant information from Python code."
    },
    {
        "instruction": "Variables in `CodeVisitor.visit_Assign` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_Assign(self, node: ast.Assign):\n    \"\"\"\n        Get self.constants\n        Args:\n            node: ast.Assign: The node to visit.\n        \"\"\"\n    if isinstance(node.parent, ast.Module):\n        for target in node.targets:\n            if isinstance(target, ast.Name):\n                value = node.value\n                if isinstance(value, ast.Constant) and isinstance(value.value, str):\n                    value_repr = f\"'{value.value}'\"\n                else:\n                    value_repr = ast.unparse(value)\n                constant_assignment = f'{target.id}={value_repr}'\n                self.constants.append(constant_assignment)\n    self.generic_visit(node)\n```",
        "output": "'node', 'value_repr', 'self', 'constant_assignment', 'value'\n\nPurpose and Significance:\nIn the `CodeVisitor` class within the given Python file, the `visit_Assign` function focuses on extracting constants found in a Python source code during top-level module traversal. The significant variables utilized and their respective functions involve:\n\n1. `node`: This parameter represents an `ast.Assign` node being processed by the `CodeVisitor`. It holds information about assignments happening at the module level, specifically those involving constants stored as strings.\n\n2. `value_repr`: This variable is generated within the function when identifying constant assignments and is formatted as a string representation of a value assigned to a constant. It helps construct `constant_assignment`, which will be added to `self.constants`. If the assigned value is an `ast.Constant`, `value_repr` contains single quotes around its string content ('{value.value}''). Otherwise, it retains the unparsed representation of the node using `ast.unparse(value)`.\n\n3. `self`: Refers to the current instance of the `CodeVisitor` object. It maintains class attributes and methods needed for extracting various code details across different parts of the Abstract Syntax Tree (AST). By invoking methods from `self`, the function connects to the rest of the visitor's logic related to analyzing Python source code.\n\n4. `constant_assignment`: A string formed by concatenating an assignment statement using the constant name identified in `visit_Assign`. It consists of a variable (target name) equal to formatted value representation, assigned in the module level. This data helps gather constant variables from Python code while iterating over ast walk outputs related to Assign nodes involving target names referencing `self`.\n\n5. `value`: In the `visit_Assign`, `value` stands for an element inside `node` when handling constant assignments during traversal of `ast.Assign` nodes. It can be either a `Constant` node or any other valid Python expression, depending on its type within the AST walk. This variable assists in determining how to format `value_repr`."
    },
    {
        "instruction": "Inputs to `CodeVisitor.__init__` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef __init__(self, code: str, tree: ast.AST) -> None:\n    \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n    self.code: str = code\n    self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.file_info: Dict[str, Union[str, List[str]]] = {}\n    self.current_class: str = None\n    self.constants: List[str] = []\n    self.tree = tree\n```",
        "output": "'self', 'code', 'tree'\n\nPurpose and Significance:\nIn the `CodeVisitor` class's initialization method `__init__`, three primary inputs are utilized - `self`, `code`, and `tree`. These arguments contribute towards setting up a new instance of `CodeVisitor` while loading its attributes with relevant information necessary for analysis. Their respective purposes are outlined as follows:\n\n1. `self`: Refers to the current object instance being created during instantiation. It acts as a reference to access class methods and attributes within the constructor itself. This self-reference is inherent in Python's object-oriented programming nature where an instance keeps track of its state while executing its functions.\n\n2. `code`: Denotes the input Python code string given at initialization time. This raw code will serve as a source for abstract syntax tree generation and subsequent analysis by the `CodeVisitor`. It is assigned to the class attribute `self.code`, enabling further manipulation within methods like `remove_docstring()` or `analyze()`.\n\n3. `tree`: Represents an Abstract Syntax Tree (AST) generated from Python source code `code`. This AST enables traversal of code structure through recursion for extraction and collection of functional details related to nodes and relationships in the Python file being examined by the visitor instance during the constructor invocation `ast.parse(self.code)`. By receiving tree data during instantiation, CodeVisitor can analyze functions, classes, dependencies, constants, etc., facilitating a comprehensive understanding of the input code."
    },
    {
        "instruction": "Docstring of `CodeVisitor.__init__` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef __init__(self, code: str, tree: ast.AST) -> None:\n    \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n    self.code: str = code\n    self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.file_info: Dict[str, Union[str, List[str]]] = {}\n    self.current_class: str = None\n    self.constants: List[str] = []\n    self.tree = tree\n```",
        "output": "Initialize a new instance of the class.\n        Args:\n            code: str: The source code."
    },
    {
        "instruction": "Variables in `CodeVisitor.__init__` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef __init__(self, code: str, tree: ast.AST) -> None:\n    \"\"\"\n        Initialize a new instance of the class.\n        Args:\n            code: str: The source code.\n        \"\"\"\n    self.code: str = code\n    self.functions: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.classes: Dict[str, Dict[str, Union[str, List[str]]]] = {}\n    self.file_info: Dict[str, Union[str, List[str]]] = {}\n    self.current_class: str = None\n    self.constants: List[str] = []\n    self.tree = tree\n```",
        "output": "'self', 'code', 'tree'\n\nPurpose and Significance:\nIn the `CodeVisitor` constructor method `__init__`, three essential variables are assigned values - 'self', 'code', and 'tree'. These variables hold significant roles in setting up an instance of the class for processing Python source code analysis.\n\n1. 'self': This refers to the current object instance being initialized, acting as a reference to access or modify attributes and methods within the class scope. It helps maintain context during object creation and method invocations.\n\n2. 'code': Represents the input Python code string passed while creating an instance of `CodeVisitor`. It stores the source code that will be analyzed for extracting details about functions, classes, dependencies, constants, etc. This variable is crucial in defining the context for further operations within the class methods.\n\n3. 'tree': Refers to the Abstract Syntax Tree (AST) representation of the provided Python code. The AST provides a hierarchical breakdown of Python syntax elements allowing traversal and inspection at a fine granular level, which enables the extraction of information required for analysis. `CodeVisitor` utilizes this tree structure throughout its methods to navigate through the source code effectively."
    },
    {
        "instruction": "Inputs to `CodeVisitor.visit_FunctionDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the context of Python's 'CodeVisitor' class within get_python_method.py file, the `visit_FunctionDef` function plays a crucial role in extracting details related specifically to Python functions during its traversal through Abstract Syntax Tree (AST). This method holds two significant inputs - 'self' and 'node'.\n\n1. Purpose of Inputs:\n   a. 'self': It refers to the instance of CodeVisitor itself acting as an identifier carrying relevant attributes like code string, extracted details about functions ('functions') and classes ('classes'), along with other properties such as 'current_class', 'constants', etc. These attributes aid in collecting data pertinent to function definitions while traversing AST nodes.\n   b. 'node': It signifies an ast.FunctionDef node which requires examination by the `visit_FunctionDef` method to extract required details for a Python function definition present in the tree structure of parsed Python source code. The main functionality involves utilizing another significant component called `extract_details`, which accepts a pair of arguments namely node type ('function') and extracts comprehensive data from ast walk, which gets stored into the 'functions' dictionary residing inside this instance 'self'. This accumulated data then gets employed in capturing relevant attributes associated with a particular function in Python source code analysis.\n\n2. Significance during Function Execution:\n   The given inputs contribute towards a meaningful purpose by ensuring CodeVisitor instance has the required context while extracting necessary details for function definitions encountered in traversal. 'self' maintains persistence to various properties facilitating a thorough exploration of function data while 'node', acting as a guide node during Ast walkthrough, pinpoints actual ast.FunctionDef instances enabling information collection concerning namespaces within the source code being analyzed. Conjointly both these inputs enable `CodeVisitor` class to fulfill its primary task - gathering details about functions in Python code and storing them into relevant dictionaries ('functions') for further processing.'''"
    },
    {
        "instruction": "Docstring of `CodeVisitor.visit_FunctionDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)\n```",
        "output": "Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit."
    },
    {
        "instruction": "Calls made in `CodeVisitor.visit_FunctionDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)\n```",
        "output": "'self.extract_details', 'self.generic_visit'\n\nPurpose and Significance:\nIn the `CodeVisitor` class within the `get_python_file_details.py`, specifically during the `visit_FunctionDef` method execution, two crucial calls play vital roles - `self.extract_details` and `self.generic_visit`. Each function holds individual importance to efficiently retrieve distinct types of details within the abstract syntax tree (AST).\n\n1. 'self.extract_details(node: ast.FunctionDef)' Purpose and Significance:\n   - This method extracts significant attributes associated with a `FunctionDef` node while visiting it inside the `CodeVisitor` class context.\n   - Its execution generates information for Python functions encountered within a source code file, which is later stored in the 'functions' dictionary attribute of `CodeVisitor`.\n   - By invoking `self.extract_details`, `visit_FunctionDef` gathers details such as function name, docstring content, input arguments, return values, decorators, annotations, etc., and populates them into a comprehensive dictionary format for each identified function within the codebase.\n   - This process helps thoroughly describe a FunctionDefinition structure inside `self.functions` list/dictionary according to the documentation requirement [`req02(e)`.\n\n2. 'self.generic_visit(self, node)' Purpose and Significance:\n   - The `self.generic_visit` call serves as a fallback mechanism when no explicit visitor function exists for a particular node encountered during traversal in the Abstract Syntax Tree (AST).\n   - It ensures that every node within the AST is visited, regardless of its type or lack of customized processing logic in `CodeVisitor`.\n   - By invoking `self.visit` repeatedly over all sub-nodes returned from `ast.iter_child_nodes()`, the generic visit handles general tasks related to Python elements which have not been predefined via class methods (`visit_xxx`). This approach ensures comprehensive analysis of the code structure without omitting any node information.\n   - As per documentation requirement [`req02(d)`], `self.generic_visit` maintains a thorough traversal through the AST while updating necessary attributes like 'constants', 'file_dependencies', etc., to gather complete details about the file under examination."
    },
    {
        "instruction": "Variables in `CodeVisitor.visit_FunctionDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_FunctionDef(self, node: ast.FunctionDef) -> None:\n    \"\"\"\n        Extract details about a function.\n        Args:\n            node: ast.FunctionDef: The node to visit.\n        \"\"\"\n    details = self.extract_details(node, 'method' if self.current_class else 'function')\n    if self.current_class:\n        self.classes[self.current_class][f'class_method_{node.name}'] = details\n    else:\n        self.functions[node.name] = details\n    self.generic_visit(node)\n```",
        "output": "'self', 'details', 'node'\n\nPurpose and Significance:\nIn the `CodeVisitor` class context within the `visit_FunctionDef` method of Python's source analysis script get_python_file_details.py, the variables `self`, `details`, and `node` hold crucial roles during the extraction of function details from the Abstract Syntax Tree (AST).\n\n1. 'self': Refers to an instance of `CodeVisitor`, serving as a pointer carrying inherent characteristics, instance methods access along with dynamic values defined while processing. Inside the `visit_FunctionDef` method, it utilizes `self` to interact with other attributes and methods within the class scope.\n\n2. 'details': This variable primarily stores the extracted information about a specific function encountered during traversal. It is initialized as an empty dictionary in `CodeVisitor.__init__()`. Within `visit_FunctionDef`, `details` receives the output of `extract_details()` after processing the current `node` (FunctionDef) with the node type set to \"function\". This collected data gets stored under corresponding keys in the global 'functions' dictionary within `CodeVisitor`.\n\n3. 'node': The principal input argument representing a concrete Abstract Syntax Tree Node instance (FunctionDef), passed directly into the `visit_FunctionDef` function. This `ast.FunctionDef` node signifies an occurrence of a Python function definition within the analyzed codebase that `self` should extract details for, further contributing to accumulating overall file information. As `CodeVisitor` iterates through the AST structure, this node serves as the focus of operation in `visit_FunctionDef`."
    },
    {
        "instruction": "Inputs to `CodeVisitor.visit_ClassDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the context of 'CodeVisitor' class within the get_python_file_details.py module, the `visit_ClassDef` function serves an important role in collecting detailed information regarding classes during the traversal and analysis of Python source code using Abstract Syntax Tree (AST). This method gets invoked when encountering a ClassDef node within the code execution flow. Its two significant inputs are 'self' and 'node', carrying particular significance as follows:\n\n1. 'self': This input refers to an instance of the `CodeVisitor` object itself. It maintains contextual data like source code string ('code'), extracted details for functions ('functions') and classes ('classes'), along with a current class name in scope ('current_class'). While processing the AST, `visit_ClassDef` uses this 'self' parameter to update attributes pertinent to its task, i.e., capturing details about classes.\n\n2. 'node': This input represents an ast.ClassDef node encountered during traversal. It is the current node being visited by the CodeVisitor instance while exploring the Abstract Syntax Tree. Analysis commences using ClassDef structure which might carry useful details on attributes and nested class method definitions along with any possible parent relationships associated. While breaking down data corresponding to classes present within source code ('self'), the primary usage here centers around extracting information from this 'node' argument.\n\nBy combining these inputs, `visit_ClassDef` effectively contributes towards populating the 'classes' dictionary in CodeVisitor class with extracted details about classes found during traversal and analysis of Python source code AST. It aids in structuring overall understanding about the program structure and enhances further analysis of file contents for generating detailed documentation on Python files."
    },
    {
        "instruction": "Docstring of `CodeVisitor.visit_ClassDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None\n```",
        "output": "Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit."
    },
    {
        "instruction": "Calls made in `CodeVisitor.visit_ClassDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None\n```",
        "output": "'self.extract_details', 'self.generic_visit'\n\nPurpose and Significance:\nIn the `CodeVisitor` class within the given Python script, specifically during the `visit_ClassDef` method execution, two significant calls are executed - `self.extract_details` and `self.generic_visit`. Each of these plays a vital role in processing Python source code to gather information related to classes while traversing an Abstract Syntax Tree (AST).\n\n1. `self.extract_details(node: ast.AST, node_type: str)`:\n   Purpose: This call extracts details about the current node being processed within a class definition context ('node'). It collects comprehensive information regarding classes and their attributes in Python code by analyzing Ast nodes. By employing `ast.walk()`, it gathers various class properties like method definitions, inheritance details, static methods, etc., which are then stored under corresponding keys in the `classes` dictionary within the `CodeVisitor` instance.\n   Significance: It aids in accumulating crucial data about classes to build an organized representation of the code structure and facilitates further analysis of class-related aspects.\n\n2. `self.generic_visit(node)`:\n   Purpose: Serves as a backup function that manages traversing Ast nodes with undefined visitation methods (implicit actions). This method is essential when dealing with nodes other than FunctionDef or ClassDef, ensuring the entire AST gets explored without missing any information during file analysis. It iterates through child nodes using `ast.iter_child_nodes()` and invokes `self.visit()` for each encountered node recursively.\n   Significance: Ensures comprehensive traversal of the Abstract Syntax Tree even when no specific visitation method exists for a particular node type, contributing to overall data gathering from Python source code comprehensively. This approach helps collect diverse code details not confined only to functions and classes but covers all relevant elements encountered during traversal."
    },
    {
        "instruction": "Variables in `CodeVisitor.visit_ClassDef` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef visit_ClassDef(self, node: ast.ClassDef) -> None:\n    \"\"\"\n        Extract details about a class.\n        Args:\n            node: ast.ClassDef: The node to visit.\n        \"\"\"\n    self.classes[node.name] = self.extract_details(node, 'class')\n    self.current_class = node.name\n    self.generic_visit(node)\n    self.current_class = None\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the context of `CodeVisitor` class within the given Python script, the variables `'self' and `'node' play crucial roles during the execution of its method `visit_ClassDef`. These parameters hold specific functionalities while processing Python source code analysis.\n\n1. 'self': This keyword referrers to an instance or object of CodeVisitor class created via its constructor __init__(). It helps preserve valuable internal data within that object. Through methods inheritance from the NodeVisitor in `ast` module, it holds several essential attributes like code, functions dictionary for extracted function details, classes dictionary storing class-related information, and file_info carrying file analysis details such as dependencies or constants defined throughout the code traversal process. As `visit_ClassDef` is a method within CodeVisitor class, 'self' allows accessing these properties to update relevant data structures based on encountered ClassDef nodes during Abstract Syntax Tree (AST) navigation.\n\n2. 'node': Represents the actual input parameter for visit_ClassDef(), indicating the AstNode (ast.ClassDef type in this scenario), where code inspection currently dwells as method traverses over AstNode within parse tree depth first fashion for fetching accurate Class Details which need processing against code structural properties ('CodeVisitor.'visit'_ClassDef' procedure). Each instant interaction or invocation of `visit_ClassDef` occurs with a new node from AST being passed as 'node', enabling extraction of class-specific information and storing it in the classes dictionary. This variable serves as a bridge between abstract syntax tree traversal and data storage within CodeVisitor instance."
    },
    {
        "instruction": "Inputs to `CodeVisitor.generic_visit` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef generic_visit(self, node):\n    \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n    for child in ast.iter_child_nodes(node):\n        child.parent = node\n        self.visit(child)\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the context of the 'CodeVisitor' class within the given Python script, the method `generic_visit` serves as a utility function that manages traversal through an Abstract Syntax Tree (AST) without requiring specific handling for individual node types. It acts as a generic approach when no explicit visitor function exists for a particular node type during analysis. The two inputs 'self' and 'node' hold crucial roles in executing this process:\n\n1. 'self': This refers to the instance of the `CodeVisitor` object itself, which maintains attributes related to code extraction such as parsed Python source code ('code'), extracted details for functions ('functions') and classes ('classes'), file information dictionary ('file_info'), and current class context ('current_class'). By having access to these attributes, `generic_visit` can interact with relevant data while traversing the AST.\n\n2. 'node': This input represents the current node being visited during Abstract Syntax Tree exploration. It is passed as an argument when calling `CodeVisitor.visit()` on child nodes within `ast.iter_child_nodes()`. As `generic_visit` handles nodes without customized visitor functions, it ensures traversal across various types of nodes in the AST while collecting necessary details for file analysis. By iterating over subtrees and invoking self.visit() recursively on each child node ('node'), it effectively completes comprehensive code inspection for gathering all relevant information required to construct the 'file_info' dictionary within `CodeVisitor`."
    },
    {
        "instruction": "Docstring of `CodeVisitor.generic_visit` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef generic_visit(self, node):\n    \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n    for child in ast.iter_child_nodes(node):\n        child.parent = node\n        self.visit(child)\n```",
        "output": "Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit."
    },
    {
        "instruction": "Calls made in `CodeVisitor.generic_visit` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef generic_visit(self, node):\n    \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n    for child in ast.iter_child_nodes(node):\n        child.parent = node\n        self.visit(child)\n```",
        "output": "'ast.iter_child_nodes', 'self.visit'\n\nPurpose and Significance:\nIn the `CodeVisitor` class within the given Python script, specifically during the `generic_visit` method execution, two primary calls play significant roles - `ast.iter_child_nodes()` and `self.visit()`. These operations are interconnected in processing the Abstract Syntax Tree (AST) traversal to gather necessary details about a codebase for generating file information.\n\n1. Purpose of `ast.iter_child_nodes()`: This built-in function traverses through each child node of the current node in the AST recursively. It iterates over every subnode present under the given parent node and allows the script to examine every aspect of Python code, such as functions, classes, imports, assignments, decorators, etc., thus ensuring thorough extraction of required information for further analysis.\n\n2. Purpose of `self.visit()`: As part of `CodeVisitor`, this instance method triggers a series of visitor functions defined in the class depending on the encountered node type. These visitor functions collect details about various elements such as attributes, function definitions, constants, and more to construct `file_info`. The recursive invocation ensures traversal until the entire AST is processed comprehensively for information gathering purposes. In combination with `ast.iter_child_nodes()`, these actions aid in comprehensively exploring every facet of Python source code represented as an AST instance ('tree') for data extraction during the CodeVisitor's 'generic_visit()' function invocation on received ast.AST nodes in CodeVisitor initialization (visitor analysis). Together they collaboratively map essential insights and compose detailed metadata related to file processing by instantiating 'file_info', 'functions', and 'classes'.\n'''"
    },
    {
        "instruction": "Variables in `CodeVisitor.generic_visit` in Python file: `py2dataset\\get_python_file_details.py`?",
        "input": "```python\ndef generic_visit(self, node):\n    \"\"\"\n        Called if no explicit visitor function exists for a node.\n        Args:\n            node: ast.AST: The node to visit.\n        \"\"\"\n    for child in ast.iter_child_nodes(node):\n        child.parent = node\n        self.visit(child)\n```",
        "output": "'self', 'node'\n\nPurpose and Significance:\nIn the `CodeVisitor` class within the given Python script, the method `generic_visit` serves as a utility function for handling nodes that don't require explicit custom handling during Abstract Syntax Tree (AST) traversal. It primarily focuses on recursively exploring child nodes to extract code details. The variables `self` and `node` hold significant roles in this process:\n\n1. `self` refers to the instance of the `CodeVisitor` object itself. This allows accessing essential attributes such as `functions`, `classes`, and `file_info` while iterating through nodes within the AST traversal. By having a reference to its own instance, the `generic_visit` function can modify these variables according to node encounters during analysis.\n\n2. `node` represents the current node being visited during AST traversal. It carries information about each node encountered during recursion, enabling `CodeVisitor` to identify and gather data specific to its type through methods like `visit_FunctionDef`, `visit_ClassDef`, or `visit_Assign`. This variable helps maintain context while navigating the Abstract Syntax Tree structure for extracting relevant details about functions, classes, constants, etc., which are then stored in respective dictionaries within the `CodeVisitor` instance."
    }
]