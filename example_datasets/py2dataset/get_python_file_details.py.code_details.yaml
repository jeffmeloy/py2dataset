py2dataset/get_python_file_details.py:
  Code Documentation:
  - 'I) The purpose of 'py2dataset/get_python_file_details.py' script is to extract detailed information from Python source code files. It performs analysis using Abstract Syntax Tree (AST), parses docstrings, function calls, dependencies, constants, and generates a code graph representation for better understanding of the file structure. This extracted data helps developers gain insights into the functionality of the given Python file.
    II) Requirements & API Signatures:
    1. `remove_docstring` - Removes docstrings from provided Python code string while preserving its syntax.
    Inputs: Python code string, parsed Abstract Syntax Tree representing this code snippet as argument `tree`.
    Return value: sanitized source code after stripping the comments and top-level docstrings within functions and classes but retaining the structure intact using ast.unparse().
    2. `get_all_calls` - Traverses the given AST node's subtree to identify all function calls, including nested occurrences in class attributes, list comprehensions, and lambda functions.
    Inputs: Node of type ast.AST as argument `node`, an optional dictionary `calls` to accumulate function call lists when no existing instances provided initially (Default = []).
    Outputs: A Dictionary of strings keyed with the calling functions listing arguments respectively [Function_Calls => [args...]] formed using recursion within the subtree.
    3. `CodeVisitor` - A class that traverses an Abstract Syntax Tree and extracts details about Python code, inheriting from ast.NodeVisitor for easy traversal management. It collects function definitions, class definitions, file dependencies, constants, etc., storing them in relevant attributes such as 'functions', 'classes', 'file_info'.
    Constructor Arguments: Source code `code` and parsed Abstract Syntax Tree `tree`.
    4. `get_python_file_details` - Extracts comprehensive details from a given Python file path using CodeVisitor class methods and generates a control flow structure, entire code graph representation, and PlantUML notation for visualization purposes through get_code_graph function integration.
    Inputs: File path as string `file_path`.
    Outputs: A dictionary containing extracted file details or None if an error occurs during processing.
    III) Inputs, Variables, Calls & Returns explanation in the code context:
    1. remove_docstring():
    - Inputs 'code' represents Python source code string while 'tree' is its Abstract Syntax Tree representation generated using ast.parse(). Functions remove top-level docstrings from code strings while recursively deleting nested docstrings inside function bodies or class definitions keeping AST intact by invoking `ast.unparse(tree)`.
    2. get_all_calls():
    - 'node' represents an AST node, used to find all occurrences of ast.Call instances along with their arguments within the subtree rooted at this node. It returns a dictionary mapping function calls as keys to lists of their respective arguments. If no initial call list provided ('calls'), it creates an empty list by default ['Dict[str, List[str]]].
    3. get_python_file_details():
    - Receives Python file path string 'file_path' and performs the following steps:
    a) Opens the file using 'open()', reads its content into variable 'code'.
    b) Parses code into Abstract Syntax Tree using ast.parse().
    c) Instantiates CodeVisitor object with provided source code 'code' and parsed tree as arguments ('visitor').
    d) Invokes visitor.analyze() to populate details related to the file in instance attributes.
    e) Gets a detailed graphical representation of function call relations, control flow structure & PlantUML notation from get_code_graph().
    f) Replaces quotations from json.dumps() output using replace().
    g) Returns file_details dictionary with extracted data or None in case of an error.
    4. CodeVisitor class:
    - Its methods operate on AST nodes and extract relevant information for various aspects of Python code like functions, classes, dependencies, constants, etc., storing them into attributes such as 'functions', 'classes', 'file_info'. It also maintains a current class context ('current_class') to track nested class definitions.
    - visit_FunctionDef() and visit_ClassDef(): Calls self.extract_details() method passing relevant node types as parameters ('function' or 'class'), populates 'functions'/'classes' dictionaries accordingly.
    - extract_details(): Iterates through AST walk of given node, collects function/class details into a dictionary using various calls like ast.walk(), get_all_calls(), ast.unparse(). Returns this collected data as detailed output dictionary depending on node type ('function', 'method', 'class', or 'self').
    - analyze(): Traverses AST node ('node') for dependencies capturing details related to file_summary (used JSON format) while setting up variables such as file_dependencies, function_defs, class_defs. Invokes get_code_graph() to generate entire code graph representation and PlantUML notation.
    - Other methods like visit_FunctionDef(), visit_ClassDef(), generic_visit(), visit_Assign(): Assist in traversing AST nodes efficiently by invoking appropriate extract_details() method or calling other relevant ast functions.
    '
  Dependencies:
    Value: logging, ast, typing, get_code_graph, json
    Purpose: 'The given context involves several dependencies that play crucial roles in achieving the desired functionality within 'py2dataset/get_python_file_details.py'. Understanding their purpose and significance helps us comprehend how they contribute to extracting detailed information from Python source code files effectively.
      1. logging: This module is a standard Python library used for producing diagnostic output beyond the standard output channel (sys.stdout). It allows developers to create customized log messages with different levels such as DEBUG, INFO, WARNING, ERROR, CRITICAL based on application requirements. In our code context, it's utilized to handle warnings related to file access errors during processing by logging a warning message indicating the error type and file path affected.
      2. ast (Abstract Syntax Tree): This is another Python standard library that facilitates parsing source code into data structures called Abstract Syntax Trees. It helps developers traverse Python programs more easily by providing a way to analyze them without executing the code itself. In our script, ast is employed to parse Python files into Abstract Syntax Trees which are then traversed using NodeVisitor class inherited from ast.NodeVisitor for extracting necessary details about functions, classes, dependencies, etc.
      3. typing: This module was introduced in Python 3.5 as an optional package to provide static type hints and type checking capabilities without altering the runtime behavior of Python code. In our context, typing is used with the List[Tuple[str, List[str]] data structure definition for get_all_calls() function arguments 'calls'. This allows defining the expected input format as a list containing tuples with strings representing functions and their respective arguments lists.
      4. get_code_graph: Although not explicitly mentioned as an external dependency but seems to be a custom-built function within the codebase, it generates directed graphs representing the entire code call graph using networkx library elements like nodes (function nodes, class nodes, method nodes) and edges specifying relationships between them. This graphical representation helps visualize dependencies among functions and classes in the Python file under analysis.
      5. json: This is a standard Python library used for working with JSON data types. It provides functions to encode Python objects into JSON format strings (json.dumps()) and decode JSON strings back into Python values (json.loads()). In our script, json is utilized to convert file_summary dictionary into a string representation by replacing quotations using replace(). This enables easy transfer of file dependency information when communicating between different modules or saving details into storage mediums supporting JSON format.'
  Functions:
    Value: remove_docstring, get_all_calls, get_python_file_details
    Purpose: 'The given context consists of three significant functions - 'remove_docstring', 'get_all_calls', and 'get_python_file_details' - which play crucial roles within the Python script 'py2dataset/get_python_file_details.py'. Their purposes and functionalities are as follows:
      1. remove_docstring: This function aims to eliminate docstrings from provided Python code while preserving its syntax structure. It accepts two arguments - a Python code string and an Abstract Syntax Tree representing this code snippet ('tree'). By removing top-level module docstrings along with those within functions and classes, it ensures only the core logic remains intact but without comments or introductory explanations. This helps in focusing on the main functionality of the code while maintaining its internal organization using ast.unparse().
      2. get_all_calls: Its primary objective is to recursively find all function calls within a given Abstract Syntax Tree node and its subtree. It accepts an AST node as input ('node') along with an optional dictionary ('calls') for accumulating function call lists when none exist initially (default is None). This function discovers instances of ast.Call inside class attributes, list comprehensions, and lambda functions as well, making extensive effort to extract thorough data concerning functional interaction across nested components in a program before finally returning a Dictionary containing mapping from function calls (as strings) to their arguments lists [Function_Calls => [args...]].
      3. get_python_file_details: This comprehensive function serves the purpose of extracting detailed information from a Python file path provided as input ('file_path'). It performs several steps including opening and parsing the file content into an Abstract Syntax Tree, instantiating a CodeVisitor object to analyze the code structure and dependencies. Afterwards, it fetches a detailed graphical representation of function call relations (entire code graph), control flow structure, and PlantUML notation using 'get_code_graph' integration. The resulting data is formatted into a dictionary containing extracted file details or None in case any error occurs during processing. This function effectively collects all necessary information about the Python script for better understanding of its functionality and organization.'
  Classes:
    Value: CodeVisitor
    Purpose: 'In the given context, the primary focus is on understanding the role of 'CodeVisitor' class within the 'get_python_file_details.py' script which deals with Python source code analysis and extraction of essential details for better comprehension of a file structure. This class plays a crucial part in breaking down complex code into manageable components by traversing an Abstract Syntax Tree (AST) representing the given Python file.
      [CodeVisitor] is designed as a custom visitor class that inherits from ast.NodeVisitor to facilitate easy navigation through the AST nodes. Its purpose lies in extracting specific details about functions and classes within the codebase while maintaining dependencies, constants, and other relevant information. It helps developers gain insights into the functionality of Python files by collecting necessary data during its traversal process.
      The significant tasks performed by CodeVisitor are:
      1. Identifying function definitions ('visit_FunctionDef()') and class definitions ('visit_ClassDef()'). Each extracted detail gets stored in appropriate dictionaries ('functions', 'classes'), allowing easy access later for further processing or visualization purposes.
      2. Analyzing the entire Abstract Syntax Tree using the 'analyze()' method, which populates 'file_info'. It contains all required file information including dependencies list (used during parsing imports), a summary of function and class definitions ('function_defs', 'class_defs'), and file simplified source code minus documentation string removed with help of the 'remove_docstring' utility. This extensive mapping results in deeper insight for maintaining workflows between objects inside classes, inheritances, attributes, static methods, etc.
      3. Alongside, it manages a current class context ('current_class') to handle nested class definitions effectively while traversing through the code structure. This helps distinguish between attributes defined within classes and those outside of them during extraction.
      4. The 'extract_details()' method is central to this process as it collects information about nodes depending on their types ('function', 'method', 'class', or self). It invokes other methods like 'get_all_calls()', ast.walk(), and ast.unparse() to gather specific details related to each node.
      5. Additionally, CodeVisitor utilizes 'visit_Assign()' to collect constant assignments in the global scope, 'visit()' to call generic visit functions if none is defined explicitly for a node type, and 'generic_visit()' for recursive traversal through child nodes of any given node.
      In summary, CodeVisitor serves as a core component within this script that extracts meaningful data from Python files by navigating their Abstract Syntax Tree representation, enabling developers to understand complex code structures better and identify relationships between various elements in the program logic.'
  remove_docstring:
    Inputs:
      Value: code, tree
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', the inputs for the function `remove_docstring` are specifically named as 'code' and 'tree'. Their purpose and significance can be elaborated as follows:
        1. 'code': This input represents the raw Python source code string that needs to have its docstrings removed. Docstrings are blocks of text typically placed at the beginning of modules, functions, classes, or other user-defined objects in Python programs. They serve as documentation comments providing explanations about the purpose and usage of these entities. By removing them using `remove_docstring`, developers can focus on the core logic without being distracted by extra notes.
        2. 'tree': This input represents an Abstract Syntax Tree (AST) built from the given Python code string through parsing with ast.parse(). An AST is a hierarchical representation of the source code as nodes and connections between them, making it easier to navigate and analyze the program structure without worrying about its syntactical details. In `remove_docstring`, this parsed tree allows accurate targeting and elimination of docstrings at different levels (module, function or class definitions) while keeping intact other important structural elements within Python code by preserving AST relations via ast.unparse() calls later on in the process. This method enables working on an intermediate yet semantically correct version of source code that reflects Python syntax rules accurately even after docstrings are taken away from select components but remains parseable with Pythons abstract language constructs and statements left undisturbed.'
    Calls:
      Value: isinstance, tree.body.pop, ast.walk, node.body.pop, ast.unparse
      Purpose: 'In the context of 'remove_docstring' function within 'py2dataset/get_python_file_details.py', four distinct operations represented by given methods play crucial roles:
        1. isinstance(checks if an object belongs to a specific class or inherits from it): This method ensures proper identification and handling of Python code elements like functions, classes, async functions within the Abstract Syntax Tree (AST). It helps remove_docstring() function to focus on removing docstrings only from relevant nodes without interfering with other components in the source code.
        2. tree.body.pop(): This list manipulation method deletes an element at index 0 from tree's 'body' attribute if a certain condition is met. Here, it checks if tree.body contains a Python expression representing a docstring (root node as ast.Expr holding ast.Str instance) at its first position. If found, this operation removes the top-level module docstring to eliminate it from the source code string after traversing AST subtrees for other docstrings inside functions and classes.
        3. ast.walk(): This recursive generator function walks through each node in the Abstract Syntax Tree starting with 'node'. It's utilized by CodeVisitor class methods like extract_details(), visit_FunctionDef(), etc., enabling comprehensive extraction of relevant information by navigating nodes layer-wise, allowing data retrieval even within nested elements of AST structure. In remove_docstring(), ast.walk() is indirectly called as part of recursive traversal within get_all_calls().
        4. node.body.pop(): Similar to tree.body.pop(), this call deletes an element from a node's 'body' attribute if specific conditions are satisfied. In remove_docstring(), it targets nodes inside functions or classes (isinstance checks) containing docstrings at the first position of their body list. This ensures removing docstrings from nested function/class definitions as well, keeping only code syntax intact while discarding comments and top-level module docstrings.
        5. ast.unparse(): This method converts an Abstract Syntax Tree node back into a Python source code string maintaining its original structure but without removed docstrings from prior manipulations such as popping elements via tree.body.pop() and node.body.pop(). The returned string reflects sanitized Python code stripped off unnecessary comments while preserving its syntax for further processing or analysis by other functions like get_all_calls().'
    Variables:
      Value: tree, first_body_node, code
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', particularly within the function 'remove_docstring', the mentioned variables serve crucial purposes as follows:
        1. tree: This variable represents an Abstract Syntax Tree generated using ast.parse() for the provided Python code string. It holds the internal structure of the source code in a format that's easier to navigate and manipulate programmatically. In 'remove_docstring', tree acts as input to remove docstrings while preserving the syntax intact by applying changes only on the abstract representation without altering the original code stored in 'code'.
        2. first_body_node: Inside 'remove_docstring', this variable refers to the initial node encountered during traversal within the Abstract Syntax Tree (tree). Its purpose is to identify whether the current node being processed is a function or class definition with an accompanying docstring at its beginning. If so, it gets removed from tree's body list by indexing it using 'node.body.pop(0)'.
        3. code: This variable holds the original Python source code string provided as input to the script. It represents the raw textual representation of the file before any modifications are made during analysis or documentation removal processes like in 'remove_docstring'. The sanitized version without docstrings is returned after invoking ast.unparse(tree) at the end of the function call, ensuring no change is done directly on code itself but only within Abstract Syntax Tree representation (tree).'
    Returns:
      Value: ast.unparse(tree)
      Purpose: 'In the given context relating to 'remove_docstring' function within 'py2dataset/get_python_file_details.py', the return value involving [ast.unparse(tree)] holds significance when sanitizing Python code by stripping off docstrings while preserving its syntax structure. This operation ensures that the original code's semantic meaning remains intact even after removing comments and top-level documentation strings from functions or classes.
        The 'remove_docstring' function primarily achieves two purposes:
        1. Removing Docstrings: It deletes comment strings accompanying a module definition (top level docstring), in addition to trimming topmost strings embedded inside FunctionDef or ClassDef statements found in Python source code snippet ('tree'). It acts upon an accepted Argument 'code' that signifies Python input code and processed Abstract Syntax Tree representation of the same called as 'tree'. This makes ast.unparse(tree) instrumental as it generates cleaned yet structurally preserved output string without Docstrings while keeping syntax correct after applying all modifications required to eradicate docstrings at multiple levels.
        2. Providing Cleaned Code Representation: The result returned by [ast.unparse(tree)] offers developers a clear view of Python code sans comments and top-level documentation strings. This simplified version serves as a starting point for further analysis processes such as AST traversal using 'CodeVisitor' class, where complex logic relies on retaining valid syntax even after eliminating Docstrings from source code.'
  get_all_calls:
    Inputs:
      Value: node, calls
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', the function `get_all_calls` plays a crucial role within the larger framework to extract comprehensive information about function calls present in a Python codebase. Its primary purpose is to traverse an Abstract Syntax Tree (AST) starting from a given node and identify all occurrences of function call expressions recursively, including nested instances found in class attributes, list comprehensions, or lambda functions.
        The two inputs for `get_all_calls` are as follows:
        1. 'node': This input is the root node acting as the starting point of traversal within the AST subtree where the function searches for ast.Call objects denoting calls to Python functions. As this node acts as a seed for exploration, it significantly impacts what part of the code gets examined and determines how thoroughly function calls are located across various layers in the program structure.
        2. 'calls': This parameter serves as an optional accumulator for storing discovered function call details during traversal. If no initial list is provided (Default behavior), `get_all_calls` creates an empty dictionary ['Dict[str, List[str]]]. As the function iterates through the AST nodes, it appends identified function calls along with their arguments into this accumulator list. Eventually, after returning from the traversal process, `get_all_calls` transforms this accumulated data into a dictionary format where keys represent function names and values are lists containing their respective arguments ('Dict[str, List[str]]'). Thus, 'calls' enables tracking discovered calls for final return results that ultimately form essential connections between code entities within Python scripts.'
    Calls:
      Value: isinstance, calls.append, ast.unparse, get_all_calls, ast.iter_child_nodes, calls_dict[func].extend
      Purpose: 'In the context of `get_all_calls` function within the 'py2dataset/get_python_file_details.py' script, several important methods and built-in Python facilities are being employed for comprehensively traversing and identifying function calls throughout the Abstract Syntax Tree (AST) provided as its main argument `node`. Their significance in understanding program logic and effectiveness lie in constructing a detailed dictionary of all found function call occurrences with respective arguments within subtrees. Let's delve deeper into each call mentioned:
        1. isinstance(node, ast.Call): This check determines if the current node being processed during recursion is an instance of `ast.Call`, which signifies a Python function invocation in the codebase. It's vital because if an object satisfies this criterion, then the program continues accumulating related function calls with respective arguments as the method advances down through its nested levels (including complex ones found inside attributes and lambda functions).
        2. calls.append((ast.unparse(node.func), [ast.unparse(arg) for arg in node.args]): When a function call is identified, it gets appended to the 'calls' list as a tuple containing the function name (after unparsing the `node.func` using `ast.unparse`) and a list of arguments obtained by iterating over `node.args`, applying `ast.unparse` on each argument value. This way, the function call gets stored in a format that's human-readable while maintaining syntax integrity.
        3. get_all_calls(child, calls): As recursion traverses through subtrees beneath `node`, it repeatedly invokes this function to process further nodes (represented by `child`) with existing call list `calls` maintained during the initial invocation of `get_all_calls`. It keeps collecting function calls and their arguments from each nested level, thus ensuring exhaustive search for all occurrences.
        4. ast.iter_child_nodes(node): This built-in Python facility traverses child nodes under the given node (`node`) in a depth-first manner. It helps explore the entire subtree efficiently while handling various types of nested structures within the AST, such as classes, functions, attributes, etc., ensuring no function call is missed during recursion.
        5. calls_dict[func].extend(args): After identifying all the unique function names ('func') obtained by looping through accumulated call information ('calls'), it appends argument lists retrieved during previous iterations (i.e., args) under each function name in `calls_dict`. This step ensures a dictionary structure where keys are distinct functions while values are their respective arguments lists, forming a comprehensive mapping of all identified function calls within the subtree rooted at `node`.
        In summary, these calls within `get_all_calls` contribute to efficiently finding and cataloging Python function call occurrences throughout an abstract syntax tree's various nestings level with essential syntax information, laying foundation for thorough interpretation and exploration of given Python source codes in later parts of the overall process executed by this codebase.'
    Variables:
      Value: calls, calls_dict, node
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', specifically within the function `get_all_calls`, three variables play crucial roles to achieve its objective of finding all function calls in a subtree rooted at a provided node within an Abstract Syntax Tree (AST).
        1. calls: This variable serves as an accumulator for storing function call details discovered during recursive traversal through the AST. Initially, it is set to None but gets assigned a list of tuples containing calling functions and their arguments when invoked with an initial empty list ['List[Tuple[str, List[str]]']. As the algorithm progresses, this variable collects all function calls found in the tree structure and eventually returns as a dictionary representing call relationships.
        2. calls_dict: This variable is initialized to None within `get_all_calls` but gets built after completing traversal by converting the 'calls' list into a dictionary format. Each unique function name becomes a key holding its corresponding arguments as values ['Dict[str, List[str]]'. The resulting dictionary represents a mapping of functions with their respective calls and inputs for further analysis or storage purposes.
        3. node: This parameter is passed as an argument to `get_all_calls` function and acts as the root node from where traversal starts in search of function calls within the AST subtree. It could be any instance of ast.AST representing a Python code segment. As the algorithm progresses through the tree, 'node' represents the current position being inspected by `get_all_calls` while processing each level down until it exhausts all call instances within the subtree.'
    Returns:
      Value: calls_dict
      Purpose: "In the given context relating to the 'get_python_file_details.py' script inside the 'py2dataset' module, the function `get_all_calls` plays a crucial role within its nested usage in the `CodeVisitor` class for extracting information on all identified function calls in the Abstract Syntax Tree (AST) traversal process. This function significantly contributes to generating details about Python code behavior by capturing call relationships among functions throughout the program structure.\n\nThe primary purpose of `get_all_calls` is to recursively find every occurrence of ast.Call nodes within an AST subtree rooted at a given node while considering nested function calls in class attributes, list comprehensions, and lambda functions as well. It returns a dictionary mapping each identified function call as a key to its respective arguments listed as values. This data structure helps developers understand the flow of function invocations within the codebase more clearly.\n\nBreaking down `get_all_calls`'s API signature:\n1. Node (ast.AST): The root node from where search begins for function calls in the AST traversal process.\n2. Calls (List[Tuple[str, List[str]], optional): An accumulator used to store found function call details as tuples of (Function Name, Arguments List). If not provided initially, it defaults to an empty list ['None'].\n\nUpon execution, `get_all_calls` performs the following actions:\n- If 'calls' is None, initializes it as an empty tuple list [] otherwise works upon accumulated information up to now.\n- Processes recursive tree traversal via children calls ('for child in ast.iter_child_nodes(node)' iteration), iteratively exploring ast nodes looking for matches against ast.Call nodes where the actual function call occurrence exists. During matching instances, these invocations get added as new key-value pairs in the 'calls' dictionary with function names obtained from ast.unparse() and arguments extracted from node's args attribute ('[ast.unparse(arg) for arg in node.args]').\n   a) The 'args' part creates an argument list extracted directly from nodes Args tuple property - 'node.args.args'. This represents actual parameter lists passed when invoking functions during runtime.\n- After traversing the entire tree, `get_all_calls` constructs a dictionary ('calls_dict') using accumulated function call details where keys are unique function names and values correspond to their respective argument lists. This dictionary serves as an essential output for further analysis or visualization purposes in the overall code processing pipeline."
  get_python_file_details:
    Inputs:
      Value: file_path
      Purpose: 'In the context given for 'get_py2dataset/get_python_file_details.py' script, the input parameter 'file_path' holds significant value as it represents the path to a Python file that needs detailed analysis and information extraction. This input serves as the primary source from where all further operations are initiated within the function get_python_file_details().
        The role of 'file_path' can be broken down into two crucial aspects when dealing with `get_python_file_details`:
        1. Data Retrieval - This string acts as an anchor pointing towards a particular Python source code file which serves as the starting point for collecting valuable metadata required for constructing insights into the script's inner workings. The function opens this file using 'open()', reads its content, and then parses it into an Abstract Syntax Tree (AST) using ast.parse(). This AST representation further feeds multiple procedures essential in fetching descriptive statistics regarding code structures.
        2. Analysis Framework Coordination - Since get_python_file_details calls numerous supporting elements throughout execution to process and accumulate comprehensive information, the referenced file by 'file_path' provides a base upon which those auxiliary methods work collectively to gather detailed Python code knowledge such as functions definitions, class definitions, dependencies, constants, function call relationships, control flow structures, and graphical representations for visualization. These data elements help developers gain an improved understanding of the target Python file and improve code analysis capability with regards to potential interlinking dependencies, documentation patterns or inherent object properties in terms of a specified algorithmic layout (Control Flow Graph and PlantUML representation).
        To sum up, 'file_path' serves as the key entry point to `get_python_file_details` function providing essential access to the Python source code under inspection while setting the context for all subsequent operations within this utility function. It enables a deep dive into analyzing Python scripts and extracting crucial details about their structure, dependencies, relationships, and visualization possibilities.'
    Calls:
      Value: open, f.read, ast.parse, logging.warning, CodeVisitor, visitor.analyze, get_code_graph, json.dumps(file_summary).replace, json.dumps
      Purpose: 'In the `get_python_file_details` function within 'py2dataset/get_python_file_details.py', several critical operations are executed to extract detailed information from Python source code files. These functions serve unique purposes, which are as follows:
        1. open(file_path, "r", encoding="utf-8", errors="ignore"): This built-in Python function opens the specified file path given as an argument in read mode ("r"). It enables reading contents from the provided file while handling any potential encoding issues using UTF-8 encoding and ignoring invalid characters.
        2. f.read(): After opening the file with 'open()', this method reads its entire content into memory as a string variable named 'code'. This step prepares the raw Python code for further processing.
        3. ast.parse(code): Here, 'ast' stands for Abstract Syntax Tree from Python's AST module. It takes the previously read source code and parses it into an Abstract Syntax Tree representation. This tree structure helps analyze the code more efficiently by breaking down its elements into nodes representing different programming constructs like functions, classes, imports, etc.
        4. logging.warning(f"{e} error in file: {file_path}") : This call invokes a warning message from Python's built-in 'logging' module when an exception occurs during processing (PermissionError, SyntaxError or IOError). It logs the error message along with the affected file path to notify developers about potential issues.
        5. CodeVisitor(code, tree): A custom user-defined class initialized for handling Abstract Syntax Tree traversal and extracting specific code details such as function calls, docstrings, dependencies, etc. The 'CodeVisitor' object 'visitor' will store and process relevant data collected throughout its lifetime by inspecting the AST 'tree'.
        6. visitor.analyze(tree): Once CodeVisitor is instantiated with required parameters, this method triggers analysis of the Abstract Syntax Tree to populate instance attributes like 'functions', 'classes', and 'file_info' with parsed information from Python code. This step plays a significant role in preparing extracted details about dependencies, functions, classes, constants, etc.
        7. get_code_graph(file_summary, file_ast): An external function call to generate a directed graph representation of the entire code call graph using networkx library. It also creates control flow structure and PlantUML notation for visualization purposes. These representations aid in understanding complex relationships between functions, classes, methods, etc., within the Python file.
        8. json.dumps(file_summary).replace('"', ""): 'json' is Python's standard JSON encoding and decoding library used to convert Python objects into JSON strings for storing file dependencies summaries. In this case, it converts 'file_summary' dictionary into a JSON string but replaces double quotes with empty strings ('""') as they are not valid in JSON format. This ensures the final output is suitable for storage and sharing across various systems without error issues related to quote usage.
        9. json.dumps(): After returning the overall extracted details in a nested dictionary form from get_python_file_details(), this function call again converts the result into JSON string representation if required by the user for serialization purposes. However, it is not directly present within 'get_python_file_details'.'
    Variables:
      Value: file_ast, tree, visitor, file_details, file_path, code, file_summary
      Purpose: 'In the context of 'get_python_file_details', each variable plays a distinct role contributing to the overall process of extracting detailed information from Python source code files. Here's their purpose and significance:
        1. file_ast: This variable represents the Abstract Syntax Tree (AST) of the parsed Python source code corresponding to a particular file path input given. The AST structure facilitates navigating the Python program at an abstract level which eases parsing information related to docstrings, dependencies, constants, function calls etc., helping CodeVisitor to extract crucial insights from the source code.
        2. tree: Similar to file_ast but exists within 'CodeVisitor' class's constructor where it receives tree as input along with Python code string 'code'. This variable holds the Abstract Syntax Tree of parsed Python code while initializing an instance of CodeVisitor. The tree serves as a foundation for traversing and analyzing the code structure during object instantiation.
        3. visitor: An object of class 'CodeVisitor' initialized using provided Python source code 'code' and corresponding Abstract Syntax Tree 'tree'. Visitor instantiated this way will perform the main tasks related to gathering function details, class details etc., through traversal utilizing various methods of CodeVisitor class like visit_FunctionDef(), visit_ClassDef() etc.
        4. file_details: This variable holds a dictionary containing all extracted information from the Python source code after processing by 'CodeVisitor'. It consolidates data collected during analysis such as function definitions, class definitions, dependencies, constants etc., making it easily accessible for further use or storage outside the function scope.
        5. file_path: The input argument representing the path to a Python file whose details need extraction. This string is used by 'get_python_file_details' function to open and read the source code using built-in 'open()', which then gets parsed into Abstract Syntax Tree for further analysis.
        6. code: A local variable created within get_python_file_details when opening a Python file at 'file_path'. It holds the contents of the input file in string format that's later passed to ast.parse() function to generate Abstract Syntax Tree (tree).
        7. file_summary: This variable stores a subset of extracted information about the Python file in JSON format within 'file_info' dictionary of 'file_details'. It contains details like dependencies, function definitions and class definitions but excludes advanced features such as control flow structure or PlantUML notation generated separately using get_code_graph(). The JSON representation makes it easy to share this summary across systems or applications.'
    Returns:
      Value: file_details, None
      Purpose: 'In the context given for 'get_python_file_details.py', the function `get_python_file_details(file_path: str)` holds paramount significance as it acts as the main gateway to fetch exhaustive data insights regarding Python files under scrutiny. When functioning appropriately, this function yields a detailed dictionary [file_details] encapsulating all extracted information from the analyzed source code file. This data encompasses elements like function definitions, class details, dependencies, constants present within the script, entire code graph representation along with control flow structure, and PlantUML notation for visualization purposes. The obtained output [file_details] empowers developers to better understand the Python file's functionality by providing a comprehensive overview of its structure and relationships between various components.
        On the other hand, when an error occurs during processing (PermissionError, SyntaxError, IOError), `get_python_file_details()` returns 'None'. This null value signifies some problematic situation such as insufficient permissions to access the file, incorrect syntax in the code or I/O errors while reading the file content. It alerts developers about potential issues that might need attention before proceeding further with analysis.'
  CodeVisitor:
    Methods:
      Value: __init__, visit_FunctionDef, visit_ClassDef, generic_visit, visit_Assign, extract_details, analyze
      Purpose: "In the CodeVisitor class within the given context of 'get_python_file_details.py', several methods play crucial roles contributing towards extracting valuable details from a Python file using its Abstract Syntax Tree representation:\n\n1. __init__(self, code: str, tree: ast.AST) -> None:\n   - This method acts as the constructor initializing the CodeVisitor object by assigning provided source code and Abstract Syntax Tree instance to class attributes 'code' and 'tree', setting up empty dictionaries for 'functions', 'classes', 'file_info', and an empty list for 'constants'. It also sets current_class attribute to None indicating no active class context yet.\n\n2. visit_FunctionDef(node: ast.FunctionDef) -> None:\n   - This method specifically targets FunctionDef nodes in the AST walk and invokes extract_details() passing 'function' as node type. It stores the extracted details about a function into the 'functions' dictionary under the key corresponding to its name.\n\n3. visit_ClassDef(node: ast.ClassDef) -> None:\n   - Similarly, it focuses on ClassDef nodes in AST traversal and again calls extract_details() with 'class' as node type. The extracted details are stored into the 'classes' dictionary under class name keys. Additionally, if inside a class definition (current_class is set), it also updates attributes for enclosed methods under their respective class name key within the same dictionary.\n\n4. generic_visit(self, node):\n   - This utility method serves when no specific visit function exists for a node type. It iterates through child nodes of given 'node', sets parent attribute to maintain AST structure and recursively calls self.visit() on each child node.\n\n5. visit_Assign(self, node: ast.Assign):\n   - This method is responsible for collecting constants from the Python file by identifying assignments within the top-level module scope where values are strings. It appends constant assignment expressions into a list stored in 'constants' attribute.\n\n6. extract_details(self, node: ast.AST, node_type: str) -> Dict[str, Union[str, List[str]]:\n   - This key method extracts specific details about a node depending on the passed node type ('function', 'method', 'class', or 'self'). It processes AST walk of given node collecting attributes like name, docstrings, inputs/outputs, call data, returns, annotations, etc., and returns a dictionary containing these extracted details. If node_type is 'class'/'method', it also updates class attributes lists accordingly.\n\n7. analyze(self, node: ast.AST) -> None:\n   - The central analysis method in CodeVisitor traverses the Abstract Syntax Tree node ('node'), calling self.visit() on all its child nodes and compiles details captured in previous methods into 'file_info' dictionary (like file dependencies, constants list). It then builds comprehensive Python file summaries using function_defs & class_defs lists generated from functions & classes dictionaries respectively. Finally, it generates sanitized code without docstrings for easier parsing by get_code_graph().\n\nIn summary, these methods work together to traverse the Abstract Syntax Tree of a Python file, extract relevant details about functions and classes, maintain contextual information like constants and dependencies, and prepare data structures required for further analysis or visualization purposes."
    Attributes:
      Value: tree, current_class, current_class, file_info
      Purpose: 'In the context of 'CodeVisitor' class within the given Python script 'py2dataset/get_python_file_details.py', these attributes hold significant roles during analysis and extraction of details from a Python source code file using Abstract Syntax Tree (AST). Here is an explanation for each mentioned attribute:
        1. tree: This attribute represents the parsed Abstract Syntax Tree of the input Python code when instantiating 'CodeVisitor'. It acts as a foundation for traversing the code structure and extracting necessary information about functions, classes, dependencies, etc., enabling better understanding of the program logic. As 'tree' stores the parsed representation of the original source code string, it becomes an essential ingredient for navigating through different nodes within the AST.
        2. current_class (twice mentioned but refers to the same concept): This attribute serves as a mechanism to track and manage nested class definitions during traversal. When 'CodeVisitor' encounters a ClassDef node while visiting the Abstract Syntax Tree, it sets 'current_class' to indicate that the code execution is within a specific class context. Once finished with this class definition, 'current_class' gets reset to None signifying the exit from the nested scope. This attribute helps differentiate between global functions and methods (outside any class) against class functions (inside classes) and methods in extracting accurate details.
        3. file_info: As its name suggests, this attribute collects various summary details about the Python file being processed by 'CodeVisitor'. It stores crucial information like dependencies, constants, function definitions, class definitions, simplified code without comments ('file_code_simplified') for reviewers preferring easy reading or test scenarios without distraction. When processing 'analyze' method finishes gathering insights throughout AST traversal, the collected data gets stored in this attribute as a dictionary ready to be incorporated into final output when calling get_python_file_details(). This consolidated information offers an overview of the file structure and functionality at a glance.'
    Inheritance:
      Value: ast.NodeVisitor
      Purpose: "In the given Python script 'py2dataset/get_python_file_details.py', the class 'CodeVisitor' inherits from ast.NodeVisitor which plays a crucial role in facilitating traversal through an Abstract Syntax Tree (AST) representing Python code. This inheritance enables CodeVisitor to efficiently navigate and extract relevant details about functions, classes, dependencies, constants, etc., while analyzing the code structure.\n\nThe NodeVisitor class from ast module provides essential methods such as visit(), which gets overridden by CodeVisitor in custom ways to accomplish specific tasks during traversal\u2014visiting particular types of AST nodes. Its major objectives within CodeVisitor include tracking information regarding method/function definitions and attributes during their traversals for comprehensive understanding and structuring into separate attribute lists like 'functions', 'classes', and 'file_info'.\n\nSome significant methods in CodeVisitor are:\n1. visit_FunctionDef(): Extracts details about Python functions, storing them under the 'functions' dictionary attribute when visiting a FunctionDef node in AST traversal.\n2. visit_ClassDef(): Gathers information associated with class definitions storing into dictionary format inside attribute 'classes'. Here also updating respective self._current_class while stepping in (signaling to note operations pertinent only for internal Class nodes), after finishing it resets the current_class attribute.\n3. generic_visit(): Handles other cases when no specific visit method exists for a node, iterates over child nodes continuing traversal within ast framework by calling the 'visit()' method inherited from ast.NodeVisitor base class.\n4. extract_details(): Performs crucial work capturing information related to individual AST nodes based on their type (function/method or class). This includes functions inputs, returns, call graphs, etc., in suitable formats which further feed into overall 'file_info', 'functions' or 'classes'. It provides key data pieces needed to represent a clear image of code under different scopes and constructs.\n5. analyze(): Traverses the entire Abstract Syntax Tree ('node') to collect dependencies, function definitions, class definitions, constants, etc., for storing in respective attributes like 'file_dependencies', 'function_defs', 'class_defs'. It also generates a file summary JSON format and simplified code without docstrings.\n\nIn essence, the inheritance from ast.NodeVisitor significantly impacts CodeVisitor's capabilities to parse Python code comprehensively, allowing for robust analysis while traversing through AST nodes and generating essential data structures representing functions, classes, dependencies, etc., thus providing developers a detailed software documentation for better understanding of given Python files."
  CodeVisitor.__init__:
    Inputs:
      Value: self, code, tree
      Purpose: 'In the context given for CodeVisitor class initialization (or __init__ method), three main inputs are being passed: 'self', 'code', and 'tree'. Understanding their roles helps us comprehend how this class instance gets prepared to analyze Python code effectively.
        1. self: This keyword represents the instance of the currently being constructed CodeVisitor object itself during instantiation. In OOP languages like Python, it refers to the current object as an argument in methods and acts as a pointer back to the instance attributes and methods defined within the class. Here, 'self' allows accessing properties such as 'functions', 'classes', 'file_info', etc., which will be populated during the traversal of Abstract Syntax Tree (AST).
        2. code: This input argument represents the raw Python source code string that needs to be analyzed by the CodeVisitor instance. It is initially provided when creating an object and serves as a reference point for storing information related to function definitions, class definitions, dependencies, constants, etc., in respective attributes like 'functions', 'classes', etc.
        3. tree: The third input argument 'tree' is a parsed Abstract Syntax Tree representation of the Python code provided by 'code'. This tree structure helps CodeVisitor navigate through the program logic easily using ast.NodeVisitor inheritance and its methods such as visit_FunctionDef(), visit_ClassDef(), etc., enabling extraction of necessary details about functions, classes, dependencies, etc. It assists in understanding the control flow and relationship between different elements within the Python file more efficiently than working with raw code strings alone.'
    Variables:
      Value: self, tree, code
      Purpose: 'In the context of 'CodeVisitor' class initialization method __init__, the mentioned variables have distinct roles during object setup for parsing and traversing Python code using Abstract Syntax Tree (AST).
        1. self: This refers to the instance of the CodeVisitor class itself when used within methods or functions inside the class body. It allows access to attributes and methods defined within that particular object, creating scope binding with instantiation data such as source code or tree structures for later usage. When working within the class methods like __init__, 'self' is used to interact with those declared attributes (functions, classes, file_info, current_class, constants) or methods (visit_FunctionDef, visit_ClassDef, extract_details, analyze).
        2. tree: This variable represents the Abstract Syntax Tree generated from the provided Python source code using ast.parse(). The tree holds the structural representation of Python code elements as nodes connected by edges forming a directed acyclic graph (AST). It's passed into __init__ along with 'code' and acts as a base for traversal and analysis performed within CodeVisitor instances during further method calls like analyze() or extract_details().
        3. code: It indicates the input raw source code String, passed upon instantiating a new instance of the class, captured right from __init__ method parameters ("self.__init__(code: str, tree: ast.AST)" definition). This variable is essential for storing original Python file content that will be analyzed by the CodeVisitor object later during traversal or extraction operations within the class methods. It helps in connecting the actual code to its corresponding AST representation ('tree') for accurate interpretation and manipulation.'
  CodeVisitor.visit_FunctionDef:
    Inputs:
      Value: self, node
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', we focus on understanding the role of inputs within the `CodeVisitor.visit_FunctionDef` method. This particular function forms a part of the CodeVisitor class which traverses an Abstract Syntax Tree (AST) to extract details about Python code.
        1. 'self': Self-referencing instance of the CodeVisitor object invoking this visit_FunctionDef() method. It provides access to other important attributes and methods such as code (source code string), functions (dict to store function details), classes (dict for class details), file_info (general info about the file), current_class (tracking nested class definitions context), constants list, etcetera. When traversing the AST node related to a FunctionDef node invoking visit_FunctionDef(), self enables leveraging instance properties efficiently during detail extraction process and subsequent actions.
        2. 'node': It denotes the Abstract Syntax Tree Node which is being visited specifically representing a FunctionDef within Python codebase. The visit_FunctionDef() function processes this node to extract relevant information about functions, their details such as name, inputs, returns, docstrings, annotations, etc., and stores them in attributes like 'functions'. By taking the FunctionDef AST Node input during visit_FunctionDef() operation, precise location (code structure level) becomes easy for necessary attribute modification while progressively maintaining integrity in node relationships within Python source code.'
    Calls:
      Value: self.extract_details, self.generic_visit
      Purpose: "In the context of 'CodeVisitor' class within Python's get_python_file_details script, two important calls are executed in the `visit_FunctionDef` method: self.extract_details and self.generic_visit. Their purpose and significance can be elaborated as follows:\n\n1. self.extract_details():\n   This call initiates the process of extracting comprehensive details about a given function definition encountered during Abstract Syntax Tree traversal within `CodeVisitor`. It gathers information such as function name, code representation (without docstrings), inputs, returns, calls, variables used, decorators applied, and annotations associated with the function. Additionally, if the current context is inside a class definition ('current_class' attribute is set), it also collects details about class methods and attributes. The extracted data is stored in 'functions' or 'classes' dictionaries according to context before moving ahead for further AST traversal within the same method itself via self.visit(node). This crucial step plays a significant role in accumulating vital code information necessary for detailed analysis of Python files.\n\n2. self.generic_visit():\n   After invoking self.extract_details(), this call continues the traversal process in `CodeVisitor`. It handles any remaining nodes in the subtree of the function definition without explicitly defined visit methods in the class. By default, it recursively iterates through child nodes using ast.iter_child_nodes() and calls their respective visitor functions if available or performs self.visit() for undefined ones (inherited from NodeVisitor class). The purpose here is to ensure complete traversal of all AST components relevant to the Python code being analyzed, facilitating extraction of every vital data piece throughout `visit_FunctionDef` processing. It further reinforces proper documentation handling during Ast node analysis, laying the foundation for constructing an accurate representation of file details in 'CodeVisitor'."
    Variables:
      Value: self, details, node
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', particularly within the 'CodeVisitor' class, we focus on understanding the roles of variables `self`, `details`, and `node` in the method `visit_FunctionDef`. This method is a part of CodeVisitor, an AST traversing class for Python code extraction.
        1. self: Within methods like `visit_FunctionDef`, 'self' represents the current instance (CodeVisitor object itself) creating an easier way to access class attributes such as code string stored initially while initialization and parse results extracted via traversal (functions, classes, file_info). It helps bind necessary information for analysis purposes.
        2. details: This variable stores the extracted details about a specific node encountered during AST traversal. In `visit_FunctionDef`, it collects information related to Python functions. The `extract_details()` method populates 'details' with function-specific properties such as name, docstrings, inputs/outputs arguments, return statements, annotations, decorators, etc., after parsing node data obtained through `ast.walk`. As we walk across a FunctionDef node during traversal, the acquired information gets updated here and finally used to fill attributes within class instances (self.functions).
        3. node: It represents the current Abstract Syntax Tree node being visited in CodeVisitor methods like `visit_FunctionDef`. Here, 'node' is an instance of ast.FunctionDef which signifies a function definition encountered during traversal. This node serves as the central point for extracting relevant details about functions within Python code and passing it to `extract_details()` method for further processing.
        In summary, `self`, `details`, and `node` in `CodeVisitor.visit_FunctionDef` are essential components for efficiently analyzing a Python file's Abstract Syntax Tree structure by gathering functional details about each encountered FunctionDef node during traversal. 'self' provides contextual information from the class instance, 'details' stores extracted data related to the current node being processed (function definition), and 'node' refers to the specific AST node currently inspected during traversal.'
  CodeVisitor.visit_ClassDef:
    Inputs:
      Value: self, node
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', the CodeVisitor class is implemented with multiple visit methods as a way to handle various node types found in Python abstract syntax tree during its traversal for code analysis and detail extraction. Among them, `visit_ClassDef` focuses on extracting details specific to class definitions within the Abstract Syntax Tree (AST). Here are the significances of 'self' and 'node' inputs to this method:
        1. self: This refers to the instance of the CodeVisitor object itself when the visit_ClassDef method is invoked. It carries crucial attributes such as code (original Python source), functions, classes, file_info, constants, current_class (to keep track of nested class definitions), tree (parsed AST), etc. During traversal, self helps access these attributes to store extracted details appropriately in respective instance variables like functions or classes dictionaries.
        2. node: This input represents the current Abstract Syntax Tree node being visited by CodeVisitor during its traversal process. In this case, it is an ast.ClassDef type that marks the occurrence of class definition statements. Providing a concrete instance allows examining nodes at specific hierarchy levels where we wish to implement visit method behavior to understand its surrounding environment effectively. By analyzing node attributes and subnodes within node_walk list generated by ast.walk(node), CodeVisitor can extract relevant information about classes such as class name, methods defined inside it, inheritance details, static methods decorators, etc., updating the classes dictionary attribute accordingly.'
    Calls:
      Value: self.extract_details, self.generic_visit
      Purpose: 'In the CodeVisitor class within the visit_ClassDef method, two important calls stand out - self.extract_details and self.generic_visit. Their purposes are closely connected as they collaborate to extract comprehensive details about classes in Python code during Abstract Syntax Tree traversal.
        1. self.extract_details(): This call initiates the process of gathering class information when a ClassDef node is encountered. It gathers details like class name, its method definitions with associated inputs, returns, decorators, static methods inherited from parents, properties related to attribute assignment inside classes, etc., by invoking the extract_details() instance method. The extracted data populates the 'classes' dictionary in CodeVisitor class attributes for later reference or usage within the program.
        2. self.generic_visit(): This call acts as a backup strategy if there isn't any specific visitor function defined for a particular node type. It traverses the Abstract Syntax Tree further by iterating over child nodes of the current node and recursively visiting each node through visit(). Since we have visit_ClassDef explicitly implemented, generic_visit plays only secondary role within this method to continue the tree traversal when there are subnodes related to ClassDef other than function calls or properties directly affecting classes (assignment expressions concerning class attributes are managed via 'visit_Assign()' separately). The combined actions of both methods in CodeVisitor.visit_ClassDef ensure thorough extraction and analysis of class-related details from Python code during Abstract Syntax Tree traversal.'
    Variables:
      Value: self, node
      Purpose: 'In the context given from 'py2dataset/get_python_file_details.py', specifically within the CodeVisitor class, we focus on understanding the roles of 'self' and 'node' variables during the execution of `visit_ClassDef` method.
        1. self: This keyword refers to the instance of the CodeVisitor object itself when used inside any non-static method or function within a class definition in Python. In our case, it represents an initialized instance of CodeVisitor that keeps track of various attributes like code (source code), functions dictionary, classes dictionary, file_info dictionary, constants list, etc. When invoking methods on self within `visit_ClassDef`, we are interacting with properties maintained by this CodeVisitor instance, like its parent ast.AST tree for reference tracking in its `generic_visit(node)` call or updating attributes related to classes during traversal.
        2. node: This parameter represents the current Abstract Syntax Tree (AST) node being visited inside the `CodeVisitor` class's `visit_ClassDef` method. It could be an instance of ast.ClassDef representing a Python class definition encountered while traversing the AST tree. Here, 'node' helps in extracting relevant details about classes within the source code and updating respective dictionaries ('classes') during traversal. The node acts as a reference point to the current position in the Abstract Syntax Tree being analyzed by CodeVisitor.
        In summary, 'self' is an instance of the CodeVisitor class containing useful information pertaining to Python code analysis while 'node' denotes the AST node under scrutiny at any given moment within `visit_ClassDef`. Together they help perform meaningful actions on code representation during the traversal process to gather essential details about classes present in the source code.'
  CodeVisitor.generic_visit:
    Inputs:
      Value: self, node
      Purpose: 'In the given context within the CodeVisitor class, the method `generic_visit()` serves as a base for handling node types where explicit visitor functions don't exist. It ensures traversal continuation to subsequent nodes in Abstract Syntax Tree (AST) after processing specific nodes like FunctionDef or ClassDef using respective visitor methods like `visit_FunctionDef`, `visit_ClassDef`. Self refers to the current instance of the CodeVisitor class when called, utilizing its properties such as `tree`, `constants`, and various dictionaries (`functions`, `classes`, etc.) stored during AST traversal.
        The input 'node' represents an Abstract Syntax Tree node encountered during traversal. It can be any type of valid Python code construct like function definitions, class definitions, imports, assignments, etc., depending upon the progression in the tree exploration. Inside `generic_visit()`, this node is iterated through using `ast.iter_child_nodes()` to further traverse its child nodes and invoke appropriate visitor methods if available or perform generic actions like updating constants list when dealing with module level assignments.
        In summary, 'self' provides contextual information about the CodeVisitor instance while 'node' represents the current node being processed during AST traversal within `CodeVisitor.generic_visit()`. Together they enable efficient extraction of code details and maintain a comprehensive understanding of Python source code structure during analysis.'
    Calls:
      Value: ast.iter_child_nodes, self.visit
      Purpose: 'In the given context within the CodeVisitor class, particularly inside the method 'generic_visit', both 'ast.iter_child_nodes' and 'self.visit' serve significant roles in traversing through an Abstract Syntax Tree (AST) efficiently during analysis of Python code details extraction. Let's elaborate on their individual contributions:
        1. ast.iter_child_nodes: This built-in Python function associated with AST nodes provides a generator that yields each child node of the current node recursively, which is essentially iterating through every descendant in the subtree below it (including its children and further descendants). This facilitates an effective way to handle tree structures inherent to AST. CodeVisitor utilizes ast.iter_child_nodes as a source of iteration across all relevant child nodes in each step while visiting an Abstract Syntax Tree during code analysis.
        2. self.visit: This refers to the core functionality of CodeVisitor itself being inherited from ast.NodeVisitor. Every node visit or exploration invokes self.visit to advance toward traversal inside CodeVisitor. 'generic_visit', acting as a utility function for standard operations over generic node types where no specific visitor method exists (e.g., Assign nodes). It iterates through child nodes returned by ast.iter_child_nodes and recursively calls self.visit() on each child node, allowing the CodeVisitor instance to perform its analysis tasks consistently across various AST components. This way, it ensures thorough examination of the Abstract Syntax Tree while extracting necessary details about functions, classes, dependencies, constants, etc., as per requirement.'
    Variables:
      Value: self, node
      Purpose: 'In the context given from the 'CodeVisitor' class within the Python script 'py2dataset/get_python_file_details.py', we focus on understanding the role of self and node variables within the `generic_visit()` method.
        Self refers to an instance of the CodeVisitor class itself when invoked inside a particular method. In object-oriented programming languages like Python, self is a reference that connects method calls back to an existing object and helps in accessing object attributes efficiently within class definitions. It ensures method execution specific to its calling instance by providing necessary contextual information about the object. In `CodeVisitor`, self acts as a bridge between different methods and their respective data stored in instance attributes like 'code', 'functions', 'classes', etc., allowing them to interact with each other seamlessly.
        Node, on the other hand, represents an Abstract Syntax Tree (AST) node while visiting different sections of the codebase during analysis. Ast nodes break down complex Python programs into simpler pieces representing specific syntactic constructs like assignments, functions, classes, imports, etc. `generic_visit()` is responsible for traversing the entire AST structure to analyze and extract details about various code elements. Node acts as a current focus point while visiting its children recursively in order to understand the relationships between different programming elements. This method calls other methods like visit_FunctionDef(), visit_ClassDef(), or visit_Assign() depending on node type, thus allowing `CodeVisitor` to extract necessary information about functions, classes, constants, etc., by passing node as an argument.
        In summary, self connects `CodeVisitor` method executions to their related object context, whereas node acts as a central element being visited within the Abstract Syntax Tree to guide CodeVisitor during Python code traversal and detail extraction processes. Their collective interaction leads to an accurate comprehension of a Python program's intricate details while populating 'functions', 'classes', 'file_info', etc., attributes efficiently.'
  CodeVisitor.visit_Assign:
    Inputs:
      Value: self, node
      Purpose: 'Within the context of the given Python script 'py2dataset/get_python_file_details.py' and specifically focusing on the `CodeVisitor` class, the method `visit_Assign` plays a crucial role in gathering information related to constants (static values) within a Python source code file being processed. Here, self and node act as significant inputs when invoked within this method.
        1. self refers to the instance of the `CodeVisitor` class itself when it's used inside methods like `visit_Assign`. It allows accessing attributes such as 'code', 'functions', 'classes', 'current_class', or 'file_info', and shares functionality with its inherited base classes - enhancing method efficiency while retaining vital state variables within object boundaries. These details aid in populating attribute dictionaries correspondingly while analyzing different aspects of Python code like functions, class definitions, file information, etc.
        2. node refers to a current Abstract Syntax Tree node passed down through inheritance from the ast.NodeVisitor superclass into `visit_Assign`. Its exact purpose inside `visit_Assign` lies in identifying constant assignments within the Python source code. It traverses the AST structure and checks for ast.Assign nodes where targets are names representing constants (variables assigned static values). This method maintains a list named 'constants', appending such variable assignments with their respective values into it, contributing to comprehensive code analysis and data extraction by `CodeVisitor`.
        In summary, self provides access to the `CodeVisitor` object's internal state for processing, while node denotes the current node in Abstract Syntax Tree under evaluation. Together they help recognize constant declarations in Python files as part of extracting meaningful insights from code analysis through visit_Assign method execution.'
    Calls:
      Value: isinstance, ast.unparse, self.constants.append, self.generic_visit
      Purpose: 'In the context of the CodeVisitor class within the Python script 'py2dataset/get_python_file_details.py', specifically in the method `visit_Assign`, four significant calls are made involving functions or libraries - `isinstance(), ast.unparse(), self.constants.append()`, and `self.generic_visit()`. Each of these plays a crucial role in extracting details about Python code assignments during Abstract Syntax Tree traversal.
        1. isinstance(node.parent, ast.Module): This call checks if the parent node of the current Assign statement is an ast.Module object, indicating it's at the top level (file scope). It helps determine whether constants are global variables or not.
        2. ast.unparse(value) (if isinstance(value, ast.Constant)): If the assigned value in the Ast node is a constant expression with a string literal ('ast.Constant' with string 'value'), ast.unparse() method is utilized to format this expression as Python code readable by humans. This ensures that constants are stored correctly in self.constants list for further analysis.
        3. self.constants.append(constant_assignment): When a constant assignment occurs (variable assignment with a string literal value), the constant_assignment string is appended to the self.constants list. This list stores all the identified constants present within the code, useful for keeping track of globally available variables throughout analysis.
        4. self.generic_visit(node): Similar to other node visitation methods in CodeVisitor (visit_FunctionDef(), visit_ClassDef()), self.generic_visit() continues traversing child nodes beneath Assign node after assigning constants. This allows CodeVisitor to explore the entire Abstract Syntax Tree and extract more details about Python code structure.
        In summary, these calls within `CodeVisitor.visit_Assign` support discovering constants stored as string literals across variable assignments within Python scripts and prepare required information for constructive analysis throughout AST traversal. They provide insight into how constants are created in a file or module scope while maintaining the code's overall contextual understanding.'
    Variables:
      Value: node, value_repr, constant_assignment, self, value
      Purpose: 'Within the `CodeVisitor` class in Python's `get_python_file_details.py`, specifically in the `visit_Assign()` method, these variables hold particular significance while processing Python source code during analysis. Here is a breakdown of their roles:
        1. node: This parameter represents the current Abstract Syntax Tree (AST) node being visited by the CodeVisitor object during traversal. It helps identify various elements within the code structure and extract relevant details accordingly. In `visit_Assign()`, node refers to an Assign statement where variable assignments occur.
        2. value_repr: This variable stores a string representation of constants encountered during AST traversal in `CodeVisitor`. Constants are identified when visiting ast.Assign nodes inside the module level (i.e., not within classes). It captures constant values represented as strings in the code after processing through ast unparsing, making them human-readable while preserving their syntax context.
        3. constant_assignment: As `CodeVisitor` traverses the AST, it collects all assignments of constants into a list named 'self.constants'. In `visit_Assign()`, this variable temporarily holds an individual assignment statement consisting of target identifier (variable name) and its value representation ('value_repr') during its processing step within node analysis. Once the method finishes processing an ast.Assign node, it appends constant_assignment to self.constants list for future use.
        4. self: This keyword refers to the current instance of the `CodeVisitor` class itself. It allows accessing attributes like 'code', 'functions', 'classes', 'file_info', etc., defined during object instantiation without having to repeat the object name each time in method calls within the class body. It provides contextual accessibility throughout method implementations.
        5. value: This parameter represents the value node being assigned within an ast.Assign statement. While not explicitly used in `visit_Assign()`, it would be relevant when dealing with other types of assignments like attribute assignment or augmented assignment expressions in Python code. However, in this specific method, its usage is limited to fetch constants declared directly using assignments like a = b ('a' would correspond to a target variable; 'b' represents the assigned value), so Python will usually parse those variables into constant node form ('value').'
  CodeVisitor.extract_details:
    Inputs:
      Value: self, node, node_type
      Purpose: 'In the context of CodeVisitor class's extract_details method within the given Python script 'py2dataset/get_python_file_details.py', [self, node, node_type] represent critical inputs playing key roles during data extraction and processing steps.
        1. self: It refers to the instance of the CodeVisitor object itself when the extract_details method is invoked. This instance maintains crucial attributes like code (source Python file content), functions dictionary for storing function details, classes dictionary containing class definitions along with necessary parsed AST information for analysis such as constants, current_class denoting active nested classes scope. Its main function here is providing necessary data access to extract_details through instance variables required for node traversal and subsequent processing of nodes encountered during Abstract Syntax Tree exploration.
        2. node: This parameter signifies the specific AstNode in the Abstract Syntax Tree that CodeVisitor encounters while performing analysis. The method walks through the tree, analyzing each node individually to extract details related to functions or classes depending upon its type. It allows extract_details to gather information about Python code elements like function definitions, class definitions, imports, constants, etc., which are stored in attributes such as 'functions', 'classes', and 'file_info'.
        3. node_type: This input determines the category of the current AstNode being processed by extract_details - whether it represents a 'function', 'method', or 'class'. It helps differentiate between various Python code elements during extraction, allowing for tailored data collection depending on the node type encountered. For instance, when processing function nodes ('function' node_type), details related to inputs, returns, calls, etc., are collected differently compared to class nodes ('class') which gather method definitions or inheritance aspects within the extract_details output dictionary. This differentiation is vital for generating a comprehensive and structured understanding of the Python file contents.'
    Calls:
      Value: list, ast.walk, get_all_calls, ast.unparse, isinstance, set, next, call_data.keys, self.classes[self.current_class].setdefault, details.update, any
      Purpose: 'In the context of CodeVisitor's extract_details method within a Python programming setting, various built-in functions and libraries are employed to extract detailed information about different elements found in Abstract Syntax Tree nodes (ast.AST). These functions play essential roles as outlined below:
        1. list - This built-in Python type is often utilized to create temporary collections like node_variables during extraction of details for a given node. It helps store information related to variables present within the scope of that node.
        2. ast.walk(node) - This function recursively traverses an Abstract Syntax Tree starting from the provided node, allowing exploration of nested structures and accessing relevant data for analysis purposes. In extract_details(), it is used to iterate through nodes associated with a given ast.AST instance named 'node'.
        3. get_all_calls(node) - This function (defined outside CodeVisitor but called within extract_details) finds all function calls in the subtree rooted at node including those present in class attributes, list comprehensions, and lambda functions. It returns a dictionary of function calls with their arguments. Here, it helps gather call details for further processing.
        4. ast.unparse(node) - This function generates Python source code as a string representation of an Abstract Syntax Tree node. It's employed in multiple instances to keep docstrings intact while removing them or represent simplified file_code without comments during file analysis.
        5. isinstance(object, class) - This built-in function checks whether the given object belongs to the specified class type or not. In extract_details(), it is used for various checks such as identifying top-level docstrings, handling assignments related to constants, decorators, annotations, properties, etc.
        6. set - This data structure allows us to eliminate duplicates among elements in node iterations which could be attributes (in class definition case), dependencies while creating lists out of unique values. It ensures distinctness during the extraction process.
        7. next(iterator[, default]) - A built-in function that returns the next item from an iterator's collection or specified default value if the iterator is exhausted. In extract_details(), it helps retrieve docstrings by iterating over node walk and picking up the first occurrence of ast.Expr holding a string value representing docstring.
        8. call_data.keys() - This function returns all keys present in dictionary 'call_data', which contains function calls found during traversal. It's used to list out functions with their respective arguments for further processing.
        9. self.classes[self.current_class].setdefault(key, default) - A dictionary method setting default value if a particular key is absent within the scope of current class definition ('self.current_class'). This helps maintain class attributes and methods details during extraction.
        10. details.update(otherdict) - This dictionary method merges otherdict into the existing dictionary 'details', overwriting keys with new values if they exist in both dictionaries or adding new ones if unique. It's used to consolidate information extracted from different parts of code elements (function, class, etc.) into a single details object.
        11. any(sequence) - This built-in function returns True if at least one element in the given iterable sequence evaluates to true regarding a specified condition. In extract_details(), it checks whether a decorator instance within subnode's decorator list matches "staticmethod". It helps identify static methods within class definitions.
        These calls contribute towards thorough data extraction about various elements within the Python code such as functions, classes, dependencies, constants, docstrings, function call relations, etc., creating comprehensive file summaries to facilitate deeper analysis and understanding of a given Python script's functionality.'
    Variables:
      Value: node_walk, node, node_inputs, self, details, node_type, class_attributes, call_data, attributes, node_variables
      Purpose: 'In the context of the CodeVisitor class's extract_details method within a Python script analyzing Abstract Syntax Trees (AST), various variables serve specific purposes that contribute to extracting detailed information about nodes representing functions, classes, properties, constants, etc. from given source code. Understanding these variables enhances comprehension of the data collection process in Python code analysis.
        1. node_walk: It is a list generated by iterating through ast.walk(node), which traverses the AST node recursively to gather relevant information about its subnodes and children nodes. This variable helps access multiple levels of nested structures within the code efficiently.
        2. node: Represents the current node being processed in extract_details(). It could be a FunctionDef, ClassDef, Assign, Attribute, Import, or any other valid AST node type. This node acts as the entry point for extracting particular data relevant to that node category by referencing various aspects such as docstring, attributes, input parameters, and others within CodeVisitor logic flow.
        3. node_inputs: In cases where node_type equals 'function' or 'method', node_inputs represent the argument lists received in those function/method definitions. It collects input arguments for further processing.
        4. self: Refers to the instance of the CodeVisitor class itself which maintains critical data structures like functions, classes, constants, and file_info dictionaries used for storage during traversal and extraction tasks. These instances variables keep track of visited nodes' information enabling analysis consistency throughout code parsing.
        5. details: An intermediate result dictionary storing key-value pairs derived from current node inspection and manipulation operations using ast functions like ast.unparse(), get_all_calls(). It accumulates extracted data for the specific node type ('function', 'method', or 'class') until extract_details returns the overall results of current processing node operations as output dict data representation.
        6. node_type: It's a string representing the kind of node being processed ('function', 'method', or 'class'). This variable determines which sections in details dictionary will be populated depending on node type to differentiate function-specific, class-specific information, etc., ensuring accurate extraction of data pertaining to respective entities.
        7. class_attributes: A list accumulating attributes defined as self.<attribute> within a ClassDef node when traversing nested assignments. This variable keeps track of all such instances encountered during parsing class definitions in the codebase.
        8. call_data: During recursive function call discovery in get_all_calls(), call_data is a dictionary that maps function calls as keys to their respective arguments lists gathered within the subtree rooted at node. It forms an essential part of 'details' output for node types 'function' or 'method'.
        9. attributes: This variable captures names assigned to attributes while traversing assignments related to self when inside a ClassDef node. These attribute names are stored temporarily until further processing within class_defs construction in CodeVisitor logic flow.
        10. node_variables: A list collecting names of variables encountered during traversal within the current node scope. It helps identify local variable references used within functions or methods for better understanding of code behavior and dependencies.
        In summary, these variables play crucial roles in efficiently extracting details about nodes within CodeVisitor's extract_details method by managing data collection, storing intermediate results, guiding operations according to node types, and ensuring accurate representation of Python code features such as functions, classes, attributes, calls, constants, etc. They aid developers in analyzing Python source code effectively by creating meaningful data structures containing useful information for code understanding purposes.'
    Returns:
      Value: details
      Purpose: 'In the given context, 'CodeVisitor' class plays a crucial role with its method 'extract_details' that extracts various details about functions, classes, and attributes from Python source code analyzed through Abstract Syntax Tree (AST) traversal. When invoked on different nodes, this method returns detailed dictionaries containing essential information related to those specific entities within the codebase.
        The purpose of `CodeVisitor.extract_details` lies in breaking down complex Python code into manageable parts and providing insights about each segment. It helps developers understand the structure better by extracting attributes like names, docstrings, inputs/outputs, decorators, return values, etc., from nodes categorized as functions ('function'), methods ('method') or classes ('class'). The significance lies in how these details assist with code refactoring, maintenance, testing, debugging, and documentation.
        1. [details][Function]: Returned when the node is a function (function_def in AST). This dictionary provides information related to functions like name, code representation without docstrings (using ast.unparse()), function docstring if any, input arguments list ('function_inputs'), called function names with their respective inputs ('function_calls', 'function_call_inputs'), return values ('function_returns').
        2. [details][Method]: Returned when the node is a method within a class context ('class_method' in AST). This dictionary includes class name prefixed attributes like those from function details plus additional elements such as inherited classes ('class_inheritance'), static methods present within the same class ('class_static_methods').
        3. [details][Class]: Returned when the node represents a ClassDef statement in the AST. Here, extracted details encompass method names under 'class', class attributes ('class_attributes'), list of all methods defined within the class ('class_methods'), and inheriting classes if any ('class_inheritance').
        In summary, `CodeVisitor.extract_details` acts as a knowledge extraction tool from Python code by providing comprehensive details about functions, methods, and classes in a structured format that can be further utilized for various development tasks.'
  CodeVisitor.analyze:
    Inputs:
      Value: self, node
      Purpose: 'In the context given for CodeVisitor class within the 'get_python_file_details.py' script, particularly focusing on its analyze() method, 'self' and 'node' serve crucial roles as inputs when invoking this function. These parameters hold significant meaning in terms of understanding how the analysis process unfolds within the codebase.
        1. self: This keyword refers to the instance of the CodeVisitor class itself during the execution of its methods. It acts as a reference to all attributes defined within the class, such as 'code', 'functions', 'classes', 'file_info', and others. By having access to these variables, analyze() can leverage previously collected data while traversing the Abstract Syntax Tree (AST) to populate necessary details about the Python file under analysis. It allows for maintaining consistency across various methods like visit_FunctionDef(), visit_ClassDef(), extract_details(), etc., which contribute to building a comprehensive understanding of the code structure.
        2. node: This parameter represents an Abstract Syntax Tree node that serves as the starting point for traversal within CodeVisitor's analyze() method. It signifies the current position in the AST hierarchy where analysis needs to be performed. As analyze() iterates through different nodes in the tree, it calls other methods like visit(), extract_details(), and updates attributes related to file dependencies, functions, classes, constants, etc., using information extracted from this node and its descendants. This input allows CodeVisitor to navigate through the AST efficiently while gathering essential details about Python code elements such as imports, function definitions, class definitions, dependencies, etc., which are then stored in relevant attributes like 'file_dependencies', 'function_defs', 'class_defs', and so on.
        In summary, 'self' connects analyze() with all properties stored across method calls and data processed thus far during code inspection by the CodeVisitor object. 'node' identifies where the traversal needs to be done at each invocation of analyze(), providing crucial context about a specific part of the Abstract Syntax Tree that is being examined during analysis. Both inputs play vital roles in constructing comprehensive details regarding Python files for better comprehension and maintenance of code structure within CodeVisitor class operations.'
    Calls:
      Value: self.visit, list, ast.walk, isinstance, self.functions.items, len, class_details.items, method_name.startswith, self.classes.items, self.functions.keys, self.classes.keys, remove_docstring, ast.unparse
      Purpose: 'In the context of CodeVisitor's analyze() method, several essential calls serve particular purposes advancing through code analysis and gathering data:
        1. self.visit: Initiates traversal of Abstract Syntax Tree (AST) to collect information from nodes in an organized manner as defined by Python visitor design pattern implemented via ast.NodeVisitor inheritance. This allows the CodeVisitor class to visit each node within the AST and extract relevant details accordingly.
        2. list & ast.walk: Combined usage creates a list containing nodes generated while walking through the AST tree with ast.walk(). This list facilitates easier data extraction by iterating over various node types (function, class, import statements, etc.) during analysis.
        3. isinstance(): Checks if an object belongs to a specific Python class or inherits from it. In CodeVisitor, this operator helps identify nodes like FunctionDef, ClassDef, Assign, Import, etc., and allows appropriate data extraction for various code elements.
        4. self.functions.items() & len: Iterates over all function names stored in 'self.functions' dictionary and determines its length to manage loops efficiently when populating file_summary data structure related to functions.
        5. class_details.items(): Iterates over details collected for each method within a class definition while processing class nodes, allowing extraction of necessary data associated with those methods in 'class_defs' data structure formation within the code analysis.
        6. method_name.startswith('class_method_'): Validates whether given method names start with "class_method_" prefix to identify class methods within classes during class definition traversal. This helps separate class methods from other attributes while populating 'class_defs' dictionary in file_summary data structure.
        7. self.classes.items(): Iterates over all classes defined in the code, collecting their respective details needed for analysis like methods, properties, static methods, etc., forming comprehensive data on class-related elements stored under 'file_summary'.
        8. remove_docstring: Sanitizes Python source code by removing docstrings and top-level module comments while preserving its syntax structure using ast.unparse(). This ensures cleaner input for further analysis without interfering with the AST tree's integrity.
        9. ast.unparse(): Converts parsed Abstract Syntax Tree nodes back into Python source code strings, often used after manipulating or modifying the AST structure within CodeVisitor methods like visit_FunctionDef() and remove_docstring(). This allows keeping track of original code changes during analysis for better understanding.
        These calls work collaboratively in CodeVisitor's analyze() method to perform thorough analysis on Python source code files, extracting critical details about functions, classes, dependencies, constants, etc., creating a detailed summary of the file structure.'
    Variables:
      Value: node, function_defs, self, class_defs, file_dependencies, node_walk
      Purpose: 'Within the `CodeVisitor.analyze()` function, several crucial variables hold critical roles as detailed below:
        1. `node`: This parameter represents the current Abstract Syntax Tree (AST) node being processed during traversal. As the analyze method walks through the AST to extract various code details, `node` serves as the point of reference at any given time during iteration. It receives this argument when calling the analyze function.
        2. `function_defs`: This variable is initialized empty but later evolves into a list comprehension holding dictionary objects related to detected Python functions present in the source code being processed by CodeVisitor instance. Each dictionary within `function_defs` represents a specific function with its inputs, calls, call inputs, returns, etc., collected from the 'functions' attribute of the CodeVisitor instance (self). This variable helps aggregate all function-related information for further use or output in the final file details dictionary.
        3. `self`: As CodeVisitor is an object-oriented class, 'self' refers to this very instance itself. Inside `CodeVisitor`, methods can access attributes specific to that particular instance via 'self'. Within analyze(), 'self' points to the instance responsible for maintaining crucial dictionaries such as 'functions', 'classes', and 'file_info'. Thus, 'self' enables manipulation of these instance variables while processing nodes in the AST.
        4. `class_defs`: Similar to `function_defs`, `class_defs` starts empty but eventually becomes a list comprehension containing nested dictionaries representing Python classes found during traversal. Each dictionary within `class_defs` relates to one detected class in the source code with properties such as 'method_defs' storing method details. This variable accumulates class-related information analogous to how `function_defs` does for functions.
        5. `file_dependencies`: During AST traversal, dependencies like imported modules or classes are captured during node examination using import statements ('Import', 'ImportFrom'). These dependencies are stored in a set initially and later converted into a list for output purposes within the 'file_info' dictionary of CodeVisitor instance. This variable highlights external resources utilized by the Python file being analyzed.
        6. `node_walk`: Obtained from ast.walk(node), this list holds intermediate nodes traversed while processing `node`. The walk function iterates over a tree recursively and generates an ordered list of visited nodes which helps analyze child nodes to access various properties related to their ancestors, hence improving comprehensiveness during the code examination process in analyze().
        To sum up, these variables facilitate extracting comprehensive information about Python code structures such as functions, classes, dependencies while maintaining file metadata through `CodeVisitor`'s `analyze()` method execution. Each variable serves a significant purpose within this function to generate an enriched understanding of the analyzed Python source code file.'