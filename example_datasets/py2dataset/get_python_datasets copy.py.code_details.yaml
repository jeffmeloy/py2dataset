py2dataset/get_python_datasets copy.py:
  Dependencies: logging, math, re, typing, yaml
  Functions: clean_and_get_unique_elements, element_generator, get_python_datasets
  Classes: DatasetGenerator
  clean_and_get_unique_elements:
    Inputs: input_str
    Calls: enumerate, input_str.strip(\'[]\\\'"\').strip, input_str.strip, element.strip(\'\\\'" \').strip, element.strip, element_generator, .join
    Variables: start, cleaned_elements, returned_elements, input_str
    Returns: returned_elements
  element_generator:
    Inputs: input_str
    Calls: enumerate
    Variables: start, input_str
  get_python_datasets:
    Inputs: file_path, file_details, base_name, questions, model_config, detailed
    Calls: DatasetGenerator(file_path, file_details, base_name, questions, model_config, detailed).generate, DatasetGenerator
    Variables: model_config, questions, file_path, detailed, base_name, file_details
    Returns: DatasetGenerator(file_path, file_details, base_name, questions, model_config, detailed).generate()
  DatasetGenerator:
    Methods: __init__, get_response_from_llm, get_code_qa, process_question, get_info_string, process_question_type, generate
    Attributes: file_path, file_details, base_name, questions, model_config, instruct_list, question_mapping, code_qa_list, code_qa_response, llm, use_llm, detailed, llm, use_llm, detailed, code_qa_response, code_qa_list, code_qa_dict, code_qa_response
  DatasetGenerator.__init__:
    Inputs: self, file_path, file_details, base_name, questions, model_config, detailed
    Variables: model_config, questions, file_path, detailed, self, base_name, file_details
  DatasetGenerator.get_response_from_llm:
    Inputs: self, query, context
    Calls: '{}'.format, str, ```python\\n{}\\n```'.format, self.get_info_string, self.model_config['prompt_template'].format, strategy, prompt_template.format, len, self.llm.tokenize, logging.info, math.ceil, logging.error, re.sub, self.llm, response.replace, \\n'.join, line.lstrip, response.split, list, item.keys, item.values, self.model_config['prompt_template'].format(system_prompt=self.model_config['system_prompt'], instruction_prompt=self.model_config['instruction_prompt']).format, item_response.replace, item['instruction'].startswith, instruct_key.split, item_response.strip, isinstance, self.code_qa_dict[dict_key1].get, self.code_qa_dict[dict_key1][dict_key2].update, self.code_qa_dict[dict_key1].update, yaml.dump(self.code_qa_dict, Dumper=yaml.SafeDumper, width=float('inf'), sort_keys=False, default_flow_style=False).strip, yaml.dump, float'
    Variables: context_strategies, context_size, instruct_key, prompt, code_qa_text, output, dict_key2, context, query, max_context_length, response, prompt_template, item_response, dict_key1, err_msg, self, instruct_value, purpose_dict
    Returns: response
  DatasetGenerator.get_code_qa:
    Inputs: self
    Calls: item['instruction'].split, any, instruction.startswith, self.code_qa_list.append, instruction.split, code_objects_responses.setdefault(code_object, []).append, code_objects_responses.setdefault, code_objects_responses.setdefault(instruction, []).append, enumerate, code_objects_responses.items, self.code_qa_dict.setdefault, yaml.dump(self.code_qa_dict, Dumper=yaml.SafeDumper, width=float('inf'), sort_keys=False, default_flow_style=False).strip, yaml.dump, float
    Variables: output, code_type, instruction, excluded_instructions, self, code_object, code_objects_responses
  DatasetGenerator.process_question:
    Inputs: self, question_type, question_id, query, context, info
    Calls: question_id.endswith, info.get, self.get_code_qa, self.get_response_from_llm, clean_and_get_unique_elements, str, str(response).strip, self.instruct_list.append
    Variables: info, question_id, context, query, response, question_type, self
  DatasetGenerator.get_info_string:
    Inputs: info, item_type
    Calls: .join, item.strip, str(info.get(item_type, )).split, str, info.get
    Variables: info, item_type
    Returns: .join([item.strip() for item in str(info.get(item_type, )).split(, ) if item])
  DatasetGenerator.process_question_type:
    Inputs: self, question_type, question_id, question_text
    Calls: question_text.format, self.process_question, self.file_details['classes'].items, class_info.items, key.startswith, len, self.file_details[self.question_mapping[question_type]].items, self.get_info_string, .join, clean_and_get_unique_elements
    Variables: question_text, variables, info, combined, question_id, methods_string, context, query, inputs, method_name, question_type, self, mapping
  DatasetGenerator.generate:
    Inputs: self
    Calls: self.process_question_type, self.instruct_list.sort, len
    Variables: self
    Returns: self.instruct_list